______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

УДК 004.896 DOI 10.15622/ia.20.6.3

Е.Ю. ШМАЛЬКО, Ю.А. РУМЯНЦЕВ, Р.Р. БАЙНАЗАРОВ, К.Л. ЯМШАНОВ
ИДЕНТИФИКАЦИЯ НЕЙРОСЕТЕВОЙМОДЕЛИ РОБОТА ДЛЯ

РЕШЕНИЯ ЗАДАЧИ ОПТИМАЛЬНОГО УПРАВЛЕНИЯ

Шмалько Е.Ю., Румянцев Ю.А., Байназаров Р.Р., Ямшанов К.Л. Идентификация
нейросетевой модели робота для решения задачи оптимального управления.

Аннотация. Для расчета оптимального управления требуется достоверная
математическая модель объекта управления. В дальнейшем при реализации расчетных
управлений на реальном объекте эта же модель может быть использована в навигации
робота для прогнозирования его положения и корректировки показаний сенсоров, поэтому
важно, чтобы модель достаточно адекватно отражала динамику объекта. Вывод модели
часто требует значительного времени и иногда даже невозможен с использованием
традиционных методов. Ввиду все большего разнообразия и чрезвычайно сложной
природы объектов управления, включая разнообразие современных робототехнических
систем, все большую актуальность приобретает задача идентификации, которая позволяет
построить математическую модель объекта управления, имея входные и выходные
данные о системе. Идентификация нелинейной системы представляет особый интерес,
так как большинство реальных систем имеют нелинейную динамику. И если раньше
идентификация модели системы заключалась в подборе оптимальных параметров для
выбранной структуры, то появление современных методов машинного обучения открывает
более широкие перспективы и позволяет автоматизировать сам процесс идентификации.
В настоящей работе в качестве объекта управления рассматривается колесный робот с
дифференциальным приводом в симуляционной среде Gazebo, которая на сегодняшний день
является наиболее популярным программным пакетом при разработке и моделировании
робототехнических систем. Математическая модель робота заранее неизвестна. Основная
проблема заключается в том, что существующие математические модели не соответствуют
реальной динамике робота в симуляторе. В работе рассматривается решение задачи
идентификации математической модели объекта управления с помощью машинного
обучения на основе нейронной сети. Представлен новый смешанный подход, основанный
на использовании известных простых моделей объектов и идентификации неучтенных
динамических свойств объекта с помощью нейронной сети на основе обучающей выборки.
Для формирования обучающих данных был написан программный пакет, автоматизирующий
процесс сбора с помощью двух ROS-узлов. Для обучения нейросети использовался
фреймворк PyTorch и был создан программный пакет с открытым исходным кодом.
Далее идентифицированная модель объекта используется для расчета оптимального
управления. Результаты вычислительного эксперимента демонстрируют адекватность и
работоспособность полученной модели. Представленный подход на основе комбинации
известной математической модели и дополнительной идентифицированной нейросетевой
модели позволяет использовать преимущества накопленного физико-математического
аппарата и повысить его эффективность и точность за счет использования современных
средств машинного обучения.

Ключевые слова: оптимальное управление, идентификация, нейронная сеть, Gazebo,
дифференциальный робот.

1. Введение. Расчет оптимального управления известными ме-
тодами осуществляется на основе математической модели объекта в

1254 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 
ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

пространсве состояний, представленной, как правило, в виде системы
дифференциальных уравнений.

Традиционно динамические модели, описывающие интересующую
систему, выводятся с использованием основных физико-математических
законов [1]. В этом случае получение математической модели объекта
управления - сложный процесс, требующий подробных специальных зна-
ний об объекте управления. Разработка таких моделей может быть очень
трудоемкой и, следовательно, дорогостоящей. Cовременное бурное разви-
тие робототехники требует быстрых, универсальных и автоматических
подходов к определению моделей объектов.

Современный альтернативный способ получения модели объекта -
это ее идентификация, установление тождественности известному объек-
ту. В задаче идентификации математическая модель объекта управления
не известна полностью или частично, но исследователь имеет реальный
объект управления или его симулятор [2]. Необходимо найти неизвестную
многомерную функцию, описывающую динамику объекта. Пространство
входных векторов этой функции есть пространство допустимых управле-
ний для этого объекта.

Важным шагом в идентификации системы является определение
типа используемой модели, поскольку в подавляющем большинстве мето-
дов реализуется так называемая параметрическая идентификация [3, 4].
Сначала выбирается определенная структура модели, которая считается
подходящей для описания данного объекта. Далее проводится иденти-
фикационный эксперимент, в котором измеряются входные и выходные
сигналы, а затем метод идентификации реализует настройку параметров
модели в соответствии с некоторыми адаптивными законами, чтобы ре-
акция модели на входной сигнал могла приблизительно соответствовать
отклику реальной системы к тому же входному воздействию. Чаще всего
используют идентификацию объектов с помощью линейных систем [5, 6],
поскольку для них легко определить влияние различных входных сигналов
на выход. Хотя линейные модели привлекательны по многим причинам, но
они имеют существенные ограничения. В настоящее время возрос значи-
тельный интерес к методам идентификации нелинейных систем [7–9], с по-
мощью методов машинного обучения на основе нейронных сетей [10–12]
и методов символьной регрессии [13]. Они позволяют реализовывать не
только параметрическую, но и структурную идентификацию систем [14].

Нейронные сети, являясь универсальным аппроксиматором, предо-
ставляют мощный инструмент для идентификации нелинейных систем.
В виду широко распространения и доступности программного обеспе-
чения нейронные сети завоевали огромную популярность [15–18]. Были

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1255
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

разработаны и комбинированные подходы, основанные на эталонной
модели [19, 20]. В работе [21] представлен пример нейросети c прямой
связью для идентификации модели небольшого вертолета. Представлено
сравнение офлайн и онлайн обучения. В статье [22] рассмотрен подход с
использованием рекурентных нейросетей долгой краткосрочной памяти.
Данный тип нейросети устойчив к изменяющемуся временному шагу
и обычно используется для анализа аудио и видео. Существует не так
много работ по идентификации сложных объектов управления. В рабо-
тах [23,24], представлен новый алгоритм SINDy (Sparse identification of
nonlinear dynamical systems), позволяющий описывать динамику системы.
Авторы продемонстрировали работоспособность алгоритма на широком
круге задач, включая линейные и нелинейные осцилляторы и хаотическую
систему Лоренца. Однако, данный алгоритм требует высокого качества
входных данных. Известны также подходы к идентифицкации нейро-
сетевых моделей [25, 26] мобильных роботов, но они еще не получили
должного развития.

В статье представлена реализация смешанного подхода к иденти-
фикации объекта управления на основе применения нейросетей и расчета
оптимального управления для полученной модели.

В качестве объекта управления рассматривается колесный мобиль-
ный робот. Разрабатывается программная реализация системы управления
робота с использованием операционной системы ROS. Она предостав-
ляет возможность работать со всеми аспектами системы управления,
включая аппаратную абстракцию, низкоуровневое управление, передачу
сообщений между процессами, и управление пакетами.

Разрабатываемые программные комплексы отрабатывались в ими-
тационной среде-симуляторе Gazebo, которая является одним из популяр-
нейших робототехнических симуляторов, благодаря своей совместимости
с ROS. Gazebo - это 3D-симулятор, цель которого смоделировать робо-
та так, чтобы дать близкую замену тому, как робот будет вести себя
в реальной физической среде. Gazebo имеет достаточно достоверную
симуляцию физики и различных физических явлений, учитывает влияние
сил, а также имеет большое количество плагинов для симуляции работы
датчиков, например лидаров или камер. Благодаря этим фактам, боль-
шинство разработчиков систем управления робототехнических систем
по всему миру, используют данную связку ROS/Gazebo как стандарт для
отработки разрабатываемых алгоритмов управления [27, 28].

В настоящей работе была использована готовая Gazebo модель
ROSbot 2.0, интегрированная в ROS [29]. В качестве источника позиции,

1256 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 
ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

использовался плагин, дающий истинные координаты робота. Модель
робота в симуляторе представлена на рисунке 1.

Рис. 1. ROSbot в симуляторе Gazebo

Представлен смешанный подход к идентификации, когда частич-
но модель объекта известна, исходя из физических законов, а другая
часть определяется нейронной сетью, обученной на основе специально
сформированной обучающей выборки.

После реализации этапа идентификации, полученная модель с
целью апробации была использована для численного решения задачи
оптимального управления. Представленные результаты моделирования и
симуляции в Gazebo демонстрируют адекватность полученной нейросете-
вой модели.

Получение рабочей адекватной модели реального объекта управ-
ления открывает возможность для разработки реализуемых алгоритмов
оптимального управления, учитывающих тонкости динамики объекта.

2. Идентификация объекта управления. В работе используется
виртуальный робот ROSbot 2.0, реализованный в среде для физической
симуляции Gazebo. Робот представляет собой платформу на четырех
неповорачивающихся вокруг вертикальной оси колесах. К каждому коле-
су присоединен электромотор. Используется дифференциальная схема
управления: движение робота вперед и назад осуществляется путем пода-
чи одинакового напряжения на все четыре электромотора; поворот робота
вправо или влево осуществляется за счет подачи большего напряжения
на электромоторы левых или правых колес соответственно.

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1257
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

Система координат, используемая для определения модели робота,
показана на рисунке 2. Состояние робота в каждый момент времени
определяется набором чисел: {x, y, θ, v, ω}, где x, y – координаты робота
на плоскости, θ – угол между осью x и направлением робота, v – проекция
скорости движения робота v⃗ на направление робота h⃗, ω – угловая
скорость. Предполагается, что вектора v⃗ и h⃗ коллинеарны.

Рис. 2. Система координат робота. Вектор h⃗ показывает направление робота при
движении вперед. Вектором v⃗ обозначена скорость движения робота.

Модель движения робота описывается известной системой диффе-
ренциальных уравнений [30]:ẋ = v cos(θ)

ẏ = v sin(θ) . (1)
θ̇ = ω

Физически управление роботом в Gazebo реализовано с помощью
двух сигналов: uv – желаемая линейная скорость; uω – желаемая угловая
скорость. Во многих работах для расчета оптимальных движений исполь-
зуется модель, в соответствии с которой сигналы управления напрямую
передаются в систему v = uv, ω = uω. В этом случае уравнения (1)
преобразуются в следующие:ẋ = uv cos(θ)

ẏ = uv sin(θ) . (2)
θ̇ = uω

Однако, на практике наблюдается совершенно иная картина. Во-
первых, скорости не могут меняться бесконечно быстро. У системы
всегда есть определенная динамика. Во-вторых, как правило, существуют
некоторый регулятор на более низком уровне, который непосредственно
управляет скоростью вращения колес (в симуляторе) или напряжением,
1258 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 

ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

выдаваемым на моторы (на реальном роботе). Поэтому для адекватного
описания модели движения робота, в систему (1) введены два дополни-
тельных уравнения, описывающих инерционную часть системы.

ẋ = v cos(θ)
ẏ = v sin(θ)

θ̇ = ω , (3)

v̇ = fv(v, ω, uv, uω)
ω̇ = fω(v, ω, uv, uω)

где fv , fω - неизвестныефункции, которые необходимоидентифицировать.
Такие факторы, как работа неизвестного регулятора, трение колес о
поверхность, инерция, неравномерное распределение массы робота не
позволяют записать функции fv, fω в явном виде.

Для численной реализации задачи идентификации запишем урав-
нение (3) в конечно-разностной форме при временном шаге∆t:

xk+1 = xk +∆t · vkcos(θk)
yk+1 = yk +∆t · vksin(θk)

θk+1 = θk +∆t · ωk, . (4)

vk+1 = F v(vk, ωk, u
v
k, u

ω
k ,∆t)

ωk+1 = Fω(vk, ωk, u
v
k, u

ω
k ,∆t)

Для идентификации системы в работе было использовано при-
ближение функций F v, Fω параметрическими функциями F v

ϕ и Fω
ϕ .

Обучаемая функция с параметрами ϕ принимает на вход текущее состо-
яние робота, вектор управления и временной шаг и выдает состояние
робота в следующи{й момент времени:

vk+1 = F v
ϕ (vk, ωk, u

v
k, u

ω
k ,∆t)

. (5)
ωk+1 = Fω

ϕ (vk, ωk, u
v
k, u

ω
k ,∆t)

Параметры ϕ подбираются таким образом, чтобы траектория дви-
жения объекта, описываемого системой уравнений (4) с моделью (5), как
можно ближе повторяла реальную траекторию движения робота в Gazebo.

Ниже сравнивается модель (2) с моделью (3), чтобы понять какое
преимущество дает учет динамики системы и неизвестного регулятора
при решении задачи оптимального управления.

2.1. Формирование обучающей выборки. Был выбран принцип
обучения с учителем, при котором нейросеть обучается с помощью набора

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1259
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

данных "вход - эталонный выход", а затем проверяется с помощью набора
валидационных и тестовых данных, которые не попадали в обучающую
выборку.

Для сбора данных использовался симулятор Gazebo и написан
программный пакет для автоматизации процесса сбора [31] с помощью
двух основных ROS-узлов (ROS-nodes).

Первый узел – генератор управления, публикующий сгенериро-
ванную по определенным правилам последовательность управления для
робота. Длительность одного проезда∼ 50 с. Для каждого нового экспери-
мента случайным образом выбирались следующие параметры генератора
управления: период изменения линейной скорости, период изменения
угловой скорости, предельные значения и ускорения для линейной и угло-
вой скоростей. Весь проезд разбивался на несколько периодов изменения
скорости. В течение одного периода, робот ускорялся или замедляется с
заданным ускорением, скорость не изменялась при достижении заданного
предела. По завершении каждого периода знак ускорения менялся.

Второй ROS узел сохранял последовательность истинных коорди-
нат и векторов состояния робота в течение движения, текущее управление
и временную отметку. Временной шаг между отметками для каждого
проезда генерировался случайно с равномерным распределением от 0.03
до 0.2 сек. Планируемый временной шаг для работы НС равнялся 0.1 сек.
Варьирование временного шага использовалось для расширения диапазо-
на работы НС. Часть данных, таких как примеры агрессивного вождения,
собиралась с помощью телеуправления.

На рисунке 3 представлены примеры собираемых траекторий. Мож-
но увидеть, как сильно расходятся движения простой модели и реального
робота в симуляторе при одинаковых управляющих воздействиях.

Всего было собрано 238 траекторий, из низ 202 использовалось
для обучения, 18 для валидации и 18 для тестирования нейросети.

Для того, чтобы нейросеть после обучения с учителем могла пред-
сказать следующее состояние системы, набор данных для обучения должен
содержать как можно больше всевозможных состояний системы [11]. По-
этому, диапазон собраных значений для линейной скорости принимался
равным от -1.5 до 1.5 м/c, а угловой скорости — от -2.5 до 2.5 рад/c.
Собранные данные имеют нормальное распределение (см. рисунок 4). По
диагонали показаны частоты различных значений величин v, ω, uv, uω.
Вне диагонали показаны совместные распределения разных величин.

Для простой модели (2) также сохраняется последовательность
координат и векторов состояния в течение движения, для того, чтобы в
дальнейшем оценить эффективность работы нейросетевой модели. Сбор
1260 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 

ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

(a) (b)
Рис. 3. Пример траекторий собраных с помощью генератора управления

данных о поведении простой модели происходит одновременно со сбором
данных о роботе.

Рис. 4. Распределение данных

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1261
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

2.2. Обучение нейронной сети. В качестве обучаемой модели (5)
была выбрана искуственная нейронная сеть с архитектурой "многослой-
ный персептрон". Конкретные параметры модели описаны ниже.

Программное обеспечение. Для обучения нейросети использовался
фреймворк PyTorch и был создан программный пакет с открытым исход-
ным кодом для обучения нейросетевой модели [32]. Обучение реализовано
с помощью трех основных классов, написанных на языке python.

Класс модели робота RosbotModel - данный класс содержит нейро-
сеть, методы для расчета функции потерь, метрик, функцию перехода в
следующее состояние. Для нейросети можно задать необходимые пара-
метры: количество слоев, нейронов, тип модели и т.д. Можно сказать, что
RosbotModel предоставляет интерфейс для взаимодействия с нейросете-
вой моделью, а также методы для оценки ее эффективности.

Класс RosbotDataset представляет собой структуру, содержащую
набор данных об одном собранном проезде. Каждый объект класса содер-
жит информацию о залогированном проезде и предоставляет интерфейс
для взаимодействия с данными.

Класс Trainer содержит методы для непосредственного обуче-
ния нейронной сети. Данные методы взаимодействуют с объектами
RosbotModel и массивами из RosbotDataset.

Работа выполнялась с использованием инфраструктуры Центра
коллективного пользования «Высокопроизводительные вычисления и
большие данные» (ЦКП «Информатика») ФИЦ ИУ РАН (г. Москва).

Метрика качества модели. Для оценки качества модели оценива-
лась точность предсказания траектории движения моделью на проездах,
которые не были включены в обучающую выборку. Нейросеть получает на
вход начальное состояние системы и последовательность управления для
тестового проезда. Как и на этапе обучения, предсказывается траектория
движения робота. Для сравнения предсказанной и действительной траек-
торий была использована метрика ATE – средний модуль поступательного
смещения (absolute translation error):

N
1 ∑√

ATE = (xt − x̂ 2
t) + (yt − ŷt)2,

N
t=0

где N - количество точек в траектории; xt, yt – координаты точки факти-
ческой траектории; x̂t, ŷt – координаты точки предсказанной траектории.

Для оценки качества предсказанного угла была использована мет-
рика MAE – средний модуль отклонения (mean absolute error).

1262 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 
ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

N
1 ∑

MAE = |yawt − yaˆw |
N t ,

t=0

где yawt – фактическая величина угла рысканья; yaˆwt – предсказанное
значение угла рысканья.

Многошаговая функция потерь. При обучении нейросети мини-
мизируется отклонение предсказанных состояний {xk}n+N

k=n от истинных
{x̂k}n+N

k=n на отрезке траектории k ∈ [n, n+N ]

n∑+N

L = (xk − x̂ 2
k) . (6)

k=n

Начало отрезка n выбирается случайно. Длина отрезкаN является
внешним параметром. Предсказание состояний {xk}n+N

k=n делается после-
довательно, начиная с известного начального состояния x̂n. При этом
в нейросеть на каждом шаге, начиная со второго, подается предыдущее
предсказание: {

xk=n+1 = Fϕ(x̂n,∆t)
. (7)

xk>n+1 = Fϕ(xk−1,∆t)

При обучении методом градиентного спуска, ошибка одного пред-
сказанного состояния xk влияет на работу нейросети на всех предыдущих
шагах, так как градиент, при обратном распространении ошибки, передает-
ся дальше через переменную xk−1, которая является выходом нейросети
на предыдущем шаге.

При тестах выяснено, что многошаговая функция потерь (при
N > 1) приводит к модели, которая значительно лучше предсказывает
реальную траекторию робота, согласно метрикам, введенным выше, чем
при N = 1. Это объясняется тем, что наличие шума в данных и конечный
размер обучающей выборки приводят к переобучению модели. Много-
шаговая функция потерь значиетльно снижает дисперсию градиента при
оптимизации методом градиентного спуска, и, тем самым, борется с пере-
обучением. Аналогичные результаты с многошаговой функцией потерь
описаны в [17].

Параметры модели. Параметры модели, такие как количество
слоев, число нейронов в слоях, а также функция активации, подбирались
экспериментально путем сравнения метрики ATE на валидационной
выборке. Число слоев персептрона выбиралось в диапазоне между 2

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1263
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

и 10. Число нейронов на всех скрытых слоях делалось одинаковым и
выбиралось между 16 и 1024. Были протестированы функции активании
ReLU, LeakyReLU и ELU.

(a) (b)

(c)
Рис. 5. Примеры предсказанных траекторий

В виду затратности перебора всех возможных комбинаций по
времени, была выбрана следующая тактика исследования параметров.
Зафиксировав число нейронов на значении 128 для каждой функции
активации, были проверены разные количества слоев. Для всех функций
активации оказалось, что 4 слоя всегда дают меньшее значение метрики.

1264 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 
ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

Этот параметр был зафикцирован. Далее были проведены экспериенты с
разным количеством нейронов и разными функциями активации.

В результате сравнения, наиболее точной показала себя нейросеть
с 4 слоями, с 128 нейронами на всех скрытых слоях и функцией активации
ELU. Результаты обучения нейросетевой модели представлены на рисун-
ке 5. Среднее значение ATE по всем тестовым траекториям составило
0.66 м. Для простой модели среднее значение ATE – 2.66 м.

3. Решение задачи оптимального управления. Для верификации
возможности использования идентифицированной модели для управления
роботом решим задачу оптимального управления.

Задана математическая модель колесного робота (4), куда входит
функция, реализуемая нейросетью, определяющая значения скоростей
робота в зависимости от текущих значений скорости и текущих управля-
ющих воздействий.

Управление имеет ограничения

−1 ⩽ ui ⩽ 1, i = 1, 2.

Задано начальное и целевое конечное состояние:

x0 = [0 0 0 0 0]T ,

xf = [xf yf θf 0 0]T .

В рассматриваемой задаче заданы фазовые ограничения в виде
статических препятствий круглой формы.

Функционал качества управления включает в себя время дости-
жения целевой точки, минимальное расстояние от траектории робота до
целевой точки, длину траектории и штраф за наезд на препятствие:

√ J = a0tf+

a1 (xf − x(tf ))2 + (yf − y(tf ))2 + (θf − θ(tf ))2+

N∑−1√
a 2
2 (xk − xk−1) + (yk − yk−1)2+

∑∑ k=1

S K

a3 ϑ(r2i − (x̄i − x(j∆t))2 − (ȳi − y(j∆t))2)∆t→ min, (8)
i=1 j=1

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1265
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

где tf - ограничен{ное время завершения∥процесса у∥правления
t, если t < t+ и ∥x(t)− xf∥ ⩽ ε

tf = ,
t+ – иначе

ε и t+ - заданные положительные величины,N = tf/dt - количество шагов
по времени до достижения целевой точки, dt - шаг по времени равный
50 мс, (x̄i, ȳi) - коор⌊динаты центров заданных фазовых ограничений, ri
- радиусы заданных фаз⌋овых ограничений, i = 1, . . . , S, S - количество
ограничений, K = t+

∆t , a0, a1, a2, a3 - весовые коэффициенты, ϑ(a) -
ступенчатая функция Хевисайда.

Задача оптимального управления заключается в нахождении такой
последовательности управляющих воздействий uv

k, u
ω
k , которые мини-

зируют функцию J . Алгоритм должен выдавать управляющие сигналы
uv
k, u

ω
k для k = (1..N = tf/dt), где tf <= t+ - время достижения роботом

целевой точки, а dt = 50 мс. Для t+ = 10 с N = 200, что дает размер-
ность пространства, в котором надо найти минимум функции стоимости
J , равное 400. Для численного решения задачи оптимального управления
применим прямой общий подход на основе кусочно-полиномиальной
аппроксимации функции управления во времени. В связи с большой раз-
мерностью пространства поиска в настоящей работе будем искать управ-
ление в кусочно-линейном виде, т.е. искать управляющие воздействия с
временным шагом равном 1 сек, а в промежутках выдавать управление
по линейному закону. Причем, если оптимизационный алгоритм выдает
управление, выходящее за рамки допустимых управлений, то линейная
функция ограничивается допустимым пределом.

Для поиска минимума функции (8) применяем оптимизационный
метод роя частиц PSO [33,34]. За счет фазовых ограничений функционал
(8) имеет невыпуклуюформу, а значит градиентные методы могут не найти
глобальный минимум. Метод PSO в противоположность градиентным
методам не требует дифференцируемости функции, а также способен
широко исследовать пространство поиска и находит глобальный минимум
с большой вероятностью [35].

3.1. Метод PSO для расчета оптимального управления. Фор-
мально, определимфункцию стоимости f : Rn →− R, глобальныйминимум
которой следует найти. Функция принимает на вход вектор из n веще-
ственных чисел и возвращает вещественное число. Градиент f неизвестен
и не требуется. Задача найти такой вектор a, для которого f(a) < f(b)
для любого b из пространства поиска, т.е. найти глобальный минимум.

1266 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 
ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

Классический метод PSO итеративно подбирает аргументы мно-
гомерной функции стоимости, стремясь найти ее глобальный минимум.
Метод использует следующую терминологию. Существует популяция или
рой частиц. S – количество частиц в рое. Каждая частица имеет положение
xi ∈ Rn и скорость vi ∈ Rn. Частицы итеративно перемещаются в про-
странстве поиска решения в соответствии с уравнением движения. Для
каждой частицы хранится ее лучшее положение за все итерации: pi ∈ Rn.
Также хранится вектор g ∈ Rn – лучшее положение среди всех частиц
роя за все итерации. На каждой итерации алгоритма скорость частицы
меняется так, чтобы ее положение xi стремилось одновременно к pi и к
g. На движение частицы оказывают влияние еще и случайные величины.
Критерием останова вычислений может быть либо достижение заданного
значения функции стоимости, либо выполнение заданного количества
итераций.

Псевдокод PSO описан в алгоритме 1. Значения blo и bup ограни-
чивают пространство поиска. Параметры ω, ϕp, ϕg и α устанавливаются
пользователем и существенно влияют на скорость сходимости алгоритма.

Для расчета оптимального управления с помощью метода PSO,
требуется определить функцию стоимости и пространство поиска ре-
шения. Пространство поиска решения было задано как пространство
последовательностей управляющих сигналов uv

k, u
ω
k , заданных с шагом

по времени в 1 сек. Каждая такая последовательность - это одна частица
из роя. В функцию стоимости траектории (8) управление напрямую не
входит, поэтому для определенной частицы надо сначала получить тра-
екторию. В коде это делается с помощью функции propagate control to
states. На вход она принимает последовательность управляющих сигналов
uv
k, u

ω
k , заданных с шагом по времени в 1 сек. Далее шаг уменьшается

до 50 мс с помощью линейной интерполяции. После чего для расчета
зависимости скорости от времени начальное состояние робота и вся
последовательность управления подается на вход модели робота (наивной
(2) и нейросетевой (5)). И, наконец, зависимость скорости от времени
преобразуется в траекторию в соответствии с (4). Полная блок-схема
алгоритма приведена на рисунке 6.

В работе использовались следующие параметры алгоритма PSO:
ω = 1, ϕp = 0.95, ϕg = 0.05, α = 1.0. Алгоритм стабильно сходится
к минимальным значениями функции стоимости за несколько сотен
итераций. Результаты расчета в виде зависимости сигналов управления от
времени приведены на рисунке 7, а соответствующая траектория движения
- на рисунке 8.

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1267
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

Algorithm 1 PSO
Задать лучшее известное положение всех частиц:
g ∼ U(blo,bup)
for частица i=1, ...,S do

Задать начальное положение частицы:
xi ∼ U(blo,bup)
Лучшее известное положение этой частицы:
pi ← xi
Уточнить лучшее известное положение среди всех частиц:
if f(pi) < f(g) then

g← pi
end if
Задать скорость частицы:
vi ← U(−|bup − blo|, |bup − blo|)

end for
while критерий останова не достигнут do

for частица i=1, ...,S do
for координата d=1, ...,n do

Сэмплировать случайные числа:
rp, rg ∼ U(0, 1)
Обновить скорость частицы:
vd
i ← ω · vd

i + ϕprp · (pd
i − xd

i ) + ϕgrg · (gd − xd
i )

Где ϕp, ϕg – постоянные коэффициенты.
end for
Обновить положение частицы:
xi ← xi + α · vi
Где α – постоянный коэффициент.
Уточнить лучшее известное положение частицы:
if f(xi) < f(pi) then

pi ← xi
end if
Уточнить лучшее известное положение среди всех частиц:
if f(pi) < f(g) then

g← pi
end if

end for
end while

1268 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 
ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

Рис. 6. Блок-схема алгоритма PSO для расчета оптимального управления

Рис. 7. Результаты расчета оптимального управления

3.2. Верификация полученного управления в симуляторе. Для
того, чтобы убедиться в том, что нейросеть может использоваться не толь-
ко для моделирования, но и для планирования движения реального робота,
необходимо проверить, будет ли робот двигаться по той же траектории,
что и модель при планировании. В общем случае это может оказаться не
так, даже если модель показывает хорошие результаты предсказаний на
тестовых проездах. Для этого найденная оптимальная последовательность

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1269
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

Рис. 8. Результаты расчета оптимальной траектории

управляющих сигналов была подана на робот в симуляторе Gazebo. Было
сделано 10 проездов, в каждом из которых на робот в Gazebo подавалась
одинаковое управление. Примеры полученных траекторий проездов в
симуляторе представлены на рисунке 9-(а). Траектории проездов ока-
зываются разными вследствии того, что Gazebo моделирует реальную
систему со своими случайными возмущениями, а в данном случае по сути
реализовано разомкнутое управление без обратной связи.

Для сравнения полученной нейросетевой модели управления с
наивной моделью (2) задача оптимального управления была также решена
и для наивной модели. Полученное управление было подано на робота в
Gazebo, и также были собраны траектории по 10 проездам (рисунок 9-(б)).

Отклонение реальной траектории от запланированной было оце-
нено с помощью метрики ATE. ATE для наивной модели составила
0.34± 0.16, для нейросетевой модели 0.11± 0.04. Это говорит о том, что
нейросетевая модель лучше описывает изменение состояния робота.

4. Заключение. В настоящей работе представлен подход на ос-
нове нейронной сети для идентификации модели объекта управления.
Используется смешанный подход, когда модель объекта частично извест-
на. На основе представленного подхода была создана модель колесного
робота Rosbot 2.0 в симуляционной среде Gazebo с помощью искусствен-
1270 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 

ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

(a)

(b)
Рис. 9. Пример проездов робота в симуляторе Gazebo по запланированной

траектории. Проезды робота различаются между собой из-за
недетерминированного поведения симулятора Gazebo. Отображенные

препятствия учитывались при планировании движения

ной нейросети. Эксперименты показали, что нейросеть предсказывает
движение колесного робота и может автоматически учитывать такие фак-
торы, как инерция и сила трения. Показано, что с помощью нейросетевой
модели можно планировать оптимальную траекторию движения робота.
Ошибка нейросетевой модели как при моделировании движения, так и при

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1271
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

планировании траектории оказалась незначительно больше, чем разброс
траекторий вследствие недетерминированного поведения самой системы.

Основными сильными сторонами представленного подхода явля-
ется его практическая реализуемость и универсальность применения.
В настоящей работе все данные для обучения нейросети формируются
с имитационного симулятора Gazebo, который максимально близко к
реальным воспроизводит физику роботов и внешней среды, учитывая воз-
можные помехи и неопределенности. Использование симулятора Gazebo
позволило автоматизировать процесс сбора данных для обучения нейрон-
ной сети. Кроме того, в настоящей работе мы протестировали полученную
нейросетевую модель на примере решения прикладных задач, таких как
задача оптимального управления.

Представленную модель можно использовать как для оптимального
планирования маршрута в известных условиях, как представлено в статье,
так и при разработке других алгоритмов, основанных на предсказании
поведения модели. Представленный метод идентификации открыт для
использования и редактирования, исходный код находится в репозито-
рии Github [31, 32]. В качестве дальнейшей работы полученную модель
планируется использовать для численных расчетов в различных задачах
оптимального управления с фазовыми ограничениями, в том числе с
динамическими фазовыми ограничениями, когда в задаче имеется группа
роботов, а также в задаче навигации для дополнительного уточнения
положения робота по модели в условиях автономного движения, а также
при реализации алгоритмов планирования пути на основе предсказания
поведения модели.

Литература
1. Зенкевич С.Л., Назарова А.В. Система управления мобильного колесного робота //

Вестник МГТУ им. Н.Э. Баумана. Сер. “Приборостроение”. 2006. № 3, С.31–51.
2. Gazebo simulation environment tutorial. URL: https://www.gazebosim.org/tutorials?tut=

ros_overview (дата обращения: 26.11.2021).
3. Ljung L. System Identification: Theory for the User (second ed.) // Upper Saddle River,

New Jersey: Prentice-Hall, 1999.
4. Dastangoo P., Ramirez-Serrano A. Non-linear Parameter Identification for Humanoid

Robot Components // The 7th International Conference of Control, Dynamic Systems,
and Robotics. 2020.

5. Алексеев А.А. , Кораблев Ю.А., Шестопалов М.Ю. Идентификация и диагностика
систем: учеб. для студ. высш. учеб. заведений // М.: Издательский центр «Академия»,
2009.

6. Cox P., Toth R. Linear parameter-varying subspace identification: A unified framework //
Automatica. 2021. 123. 109296.

7. Sjöberg J., Zhang Q., Ljung L., Benveniste A., Delyon B., Glorennec P., Hjalmarsson H.,
Juditsky A. Nonlinear black-box modeling in system identification: a unified overview //
Automatica. 1995. vol. 31(12). рр. 1691—1724.

1272 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 
ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

8. Nelles O. Classical Polynomial Approaches // Nonlinear System Identification. Springer,
Berlin, Heidelberg, 2001.

9. Fakhrizadeh Esfahani A., Dreesen P., Tiels K., Noël J.-P., Schoukens J. Parameter reduction
in nonlinear state-space identification of hysteresis // Mechanical Systems and Signal
Processing. 2017. 104.

10. Liu G. P. Nonlinear identification and control: a neural network approach // Springer
Science & Business Media. 2012.

11. Werbos P. J. (n.d.). Neural networks for control and system identification // Proceedings
of the 28th IEEE Conference on Decision and Control. 1989.

12. Fu Z. J. et al. Nonlinear systems identification and control via dynamic multitime scales
neural networks //IEEE transactions on neural networks and learning systems. 2013. vol.
24. no. 11. pp. 1814–1823.

13. Dang,T.P., Diveev, A.I., Kazaryan, D.E., Sofronova, E.A. Identification Control Synthesis
By The Network OperatorMethod // Proceedings 2015 IEEE 10th Conference on Industrial
Electronics and Applications (ICIEA). 2015. pp. 1559–1564.

14. Дивеев А.И., Софронова Е.А., Шмалько Е.Ю. Метод идентификационного син-
теза управления и его применение к мобильному роботу // Информационные и
математические технологии в науке и управлении. 2016. № 2. С. 53-61.

15. Gautam P. System identification of nonlinear Inverted Pendulum using artificial neural
network // 2016 International Conference on Recent Advances and Innovations in
Engineering (ICRAIE). 2016. pp. 1–5.

16. Zheng D. D., Xie W. F., Luo C. Robust identification for singularly perturbed nonlinear
systems using multi-time-scale dynamic neural network //2017 IEEE 56th Annual
Conference on Decision and Control (CDC). 2017. pp. 6487–6492.

17. Mohajerin N., Waslander S. L. Multistep prediction of dynamic systems with recurrent
neural networks //IEEE transactions on neural networks and learning systems. 2019. vol.
30. no. 11. pp. 3370–3383.

18. Khodabandehlou H., Fadali M. S. Nonlinear System Identification using Neural Networks
and Trajectory-Based Optimization //arXiv preprint arXiv:1804.10346. 2018.

19. Williams G. et al. Aggressive driving with model predictive path integral control //2016
IEEE International Conference on Robotics and Automation (ICRA). 2016. pp. 1433–1440.

20. Williams G. et al. Autonomous racing with autorally vehicles and differential games
//arXiv preprint arXiv:1707.04540. 2017.

21. Samal, M. K., Anavatti, S., Garratt, M. Neural Network Based System Identification for
Autonomous Flight of an Eagle Helicopter // IFAC Proceedings. 2008. vol. 41(2). pp.
7421—7426. 2008.

22. YuWang. A new concept using LSTM Neural Networks for dynamic system identification
// American Control Conference (ACC). 2017.

23. Brunton S.L., Proctor J.L., Kutz J.N. Discovering governing equations from data: Sparse
identification of nonlinear dynamical systems. 2015.

24. Kaiser E., Kutz J. N., Brunton S. L. Sparse identification of nonlinear dynamics for model
predictive control in the low-data limit //Proceedings of the Royal Society A. 2018. vol.
474. no. 2219. P. 20180335.

25. Jian’an X., Mingjun Z., Jian Z. Kinematic model identification of autonomous mobile robot
using dynamical recurrent neural networks //IEEE International Conference Mechatronics
and Automation. 2005. vol. 3. pp. 1447–1450.

26. Roy T., Barai R.K. and Dey R. Identification of Differentially Driven Wheeled Mobile
Robot using Neural Networks // International Journal of Electrical, Electronics and
Computer Engineering. 2013. vol. 2(2). pp.38–45.

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1273
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

27. Lavrenov R., Magid E., Matsuno F., Svinin M., Suthakorn J. Development and
Implementation of Spline-based Path Planning Algorithm in ROS/Gazebo Environment //
SPIIRAS Proceedings. 2019. Vol. 18. pp. 57-84.

28. Zhang B., Liu P. Control and benchmarking of a 7-DOF robotic arm using Gazebo and
ROS // PeerJ Computer Science. 2021. Vol. 7.

29. URL: https://github.com/husarion/rosbot_description (дата обращения: 26.11.2021).
30. Šuster P., Jadlovská A. Tracking Trajectory of the Mobile Robot Khepera II Using

Approaches of Artificial Intelligence // Acta Electrotechnica et Informatica. vol. 11.
31. Программный пакет для сбора данных для обучения сети в симуляторе Gazebo URL:

https://github.com/urock/rosbot (дата обращения: 26.11.2021).
32. Программный пакет для обучения нейросетевой модели URL: https://github.com/

FastSense/robot_model_training (дата обращения: 26.11.2021).
33. Kennedy J., Eberhart R. Particle swarm optimization //Proceedings of ICNN’95-

international conference on neural networks. IEEE, 1995. vol. 4. pp. 1942–1948.
34. Diveev A., Shmalko E. Evolutionary Computation for Synthesis of Control System for

Group of Robots and Optimum Choice of Trajectories for their Movement // Proceedings
of the OPTIMA-2017 Conference, Petrovac, Montenegro. 2017. pp. 158–165.

35. Дивеев А.И., Константинов С.В. Исследование практической сходимости эволюци-
онных алгоритмов оптимального программного управления колесным роботом //
Известия РАН Теория и системы управления. 2018. № 4. том 57. С. 80–106.

Шмалько Елизавета Юрьевна — канд. техн. наук, старший научный сотрудник, отдел
управления робототехническими устройствами, ФИЦ ИУ РАН. Область научных инте-
ресов: современные вычислительные методы в управлении техническими устройствами,
методы символьной регрессии и эволюционные вычисления с приложениями для иденти-
фикации, оптимизации и синтеза систем управления. Число научных публикаций — 100.
e.shmalko@gmail.com; Вавилова, 44/2, 119333, Москва, Россия; р.т.: +7(964)636-6669.

Румянцев Юрий Андреевич — аспирант, ФИЦ ИУ РАН. Область научных интересов:
методы машинного обучения с приложениями для идентификации, оптимизации и синтеза
систем управления, энергоэффективные бортовые вычислительные системы. Число науч-
ных публикаций — 0. urock@fastsense.tech; Вавилова, 14/2, 125124, Москва, Россия; р.т.:
+7(926)590-9868.

Байназаров Руслан Рысбекович — инженер машинного обучения, ООО Фаст Сенс
Студия. Область научных интересов: машинное обучение и наука о данных. Число научных
публикаций — 0. ruslan@dtlabs.tech; Ямского поля 3-я, 2/8, 125124, Москва, Россия; р.т.:
+7(926)590-9868.

ЯмшановКонстантинЛеонидович— студентмагистратуры,Новосибирский государствен-
ный технический университет (НГТУ). Область научных интересов: алгоритмы оптимизации,
синтез систем управления. Число научных публикаций — 0. kostya.yam@dtlabs.tech; пр-т К.
Маркса, 20, 630073, Новосибирск, Россия; р.т.: +7(926)590-9868.

1274 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 
ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

DOI 10.15622/ia.20.6.3

E. SHMALKO, Yu. RUMYANTSEV, R. BAINAZAROV, K. YAMSHANOV
IDENTIFICATION OF NEURAL NETWORK MODEL OF ROBOT TO

SOLVE THE OPTIMAL CONTROL PROBLEM

Shmalko E., Rumyantsev Yu., Bainazarov R., Yamshanov K. Identification of neural network
model of robot to solve the optimal control problem.

Abstract. To calculate the optimal control, a satisfactory mathematical model of the control
object is required. Further, when implementing the calculated controls on a real object, the same
model can be used in robot navigation to predict its position and correct sensor data, therefore,
it is important that the model adequately reflects the dynamics of the object. Model derivation
is often time-consuming and sometimes even impossible using traditional methods. In view of
the increasing diversity and extremely complex nature of control objects, including the variety of
modern robotic systems, the identification problem is becoming increasingly important, which
allows you to build a mathematical model of the control object, having input and output data
about the system. The identification of a nonlinear system is of particular interest, since most
real systems have nonlinear dynamics. And if earlier the identification of the system model
consisted in the selection of the optimal parameters for the selected structure, then the emergence
of modern machine learning methods opens up broader prospects and allows you to automate the
identification process itself. In this paper, a wheeled robot with a differential drive in the Gazebo
simulation environment, which is currently the most popular software package for the development
and simulation of robotic systems, is considered as a control object. The mathematical model of
the robot is unknown in advance. The main problem is that the existing mathematical models do
not correspond to the real dynamics of the robot in the simulator. The paper considers the solution
to the problem of identifying a mathematical model of a control object using machine learning
technique of the neural networks. A new mixed approach is proposed. It is based on the use of
well-known simple models of the object and identification of unaccounted dynamic properties
of the object using a neural network based on a training sample. To generate training data, a
software package was written that automates the collection process using two ROS nodes. To train
the neural network, the PyTorch framework was used and an open source software package was
created. Further, the identified object model is used to calculate the optimal control. The results
of the computational experiment demonstrate the adequacy and performance of the resulting
model. The presented approach based on a combination of a well-known mathematical model and
an additional identified neural network model allows using the advantages of the accumulated
physical apparatus and increasing its efficiency and accuracy through the use of modern machine
learning tools.

Keywords: optimal control, identification, neural network, Gazebo, differential robot.

Shmalko Elizaveta— Ph.D., Senoir researcher, Department of robotic control, FRC CSC RAS.
Research interests: modern computational methods in control of technical systems, symbolic
regression methods and evolutionary computation with applications for identification, optimization
and synthesis of control systems. The number of publications — 100. e.shmalko@gmail.com;
44/2, Vavilova, 119333, Moscow, Russia; office phone: +7(964)636-6669.

Rumyantsev Yuri— Ph.D., Senoir researcher, Department of robotic control, FRC CSC RAS.
Research interests: modern computational methods in control of technical systems, symbolic
regression methods and evolutionary computation with applications for identification, optimization

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1275
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

and synthesis of control systems. The number of publications — 100. e.shmalko@gmail.com;
44/2, Vavilova, 119333, Moscow, Russia; office phone: +7(964)636-6669.

Baynazarov Ruslan — Engineer of machine learning, Fast Sense Studio. Research interests:
data science and machine learning. The number of publications — 0. ruslan@dtlabs.tech; 2/8,
Yamskogo field 3-rd Str., 125124, Moscow, Russia; office phone: +7(926)590-9868.

Yamshanov Konstantin— Graduate student, Novosibirsk State Technical University (NSTU).
Research interests: optimization algorithms, synthesis of control systems. The number of
publications — 0. kostya.yam@dtlabs.tech; 20, K.Marx Str., 630073, Novosibirsk, Russia;
office phone: +7(926)590-9868.

References
1. Zenkevich S.L., Nazarova A.V. Sistema upravleniya mobil’nogo kolesnogo robota

[Control system of a mobile wheeled robot] // Vestnik MGTU im. N.E. Baumana.
Ser. “Priborostroyeniye”. 2006. № 3, pp.31-51. (In Russ.)

2. Gazebo simulation environment tutorial. URL: https://www.gazebosim.org/tutorials?tut=
ros_overview (accessed: 26.11.2021).

3. Ljung L. System Identification: Theory for the User (second ed.) // Upper Saddle River,
New Jersey: Prentice-Hall, 1999.

4. Dastangoo P., Ramirez-Serrano A. Non-linear Parameter Identification for Humanoid
Robot Components // The 7th International Conference of Control, Dynamic Systems,
and Robotics. 2020.

5. Alekseev A.A., Korablev Yu.A., Shestopalov M.Yu. Identifikatsiya i diagnostika sistem:
ucheb. dlya stud. vyssh. ucheb. zavedeniy [Identification and diagnostics of systems:
textbook for students]. - Publishing Center "Academy", Moscow, 2009. (In Russ.)

6. Cox P., Toth R. Linear parameter-varying subspace identification: A unified framework //
Automatica. 2021. 123. 109296.

7. Sjöberg J., Zhang Q., Ljung L., Benveniste A., Delyon B., Glorennec P., Hjalmarsson H.,
Judit-sky A. Nonlinear black-box modeling in system identification: a unified overview //
Automati-ca. 1995. vol. 31(12). рр. 1691—1724.

8. Nelles O. Classical Polynomial Approaches // Nonlinear System Identification. Springer,
Berlin, Heidelberg, 2001.

9. Fakhrizadeh Esfahani A., Dreesen P., Tiels K., Noël J.-P., Schoukens J. Parameter reduction
in nonlinear state-space identification of hysteresis // Mechanical Systems and Signal
Processing. 2017. 104.

10. Liu G. P. Nonlinear identification and control: a neural network approach // Springer
Science & Business Media. 2012.

11. Werbos P. J. (n.d.). Neural networks for control and system identification // Proceedings
of the 28th IEEE Conference on Decision and Control. 1989.

12. Fu Z. J. et al. Nonlinear systems identification and control via dynamic multitime scales
neural networks //IEEE transactions on neural networks and learning systems. 2013. vol.
24. no. 11. pp. 1814–1823.

13. Dang,T.P., Diveev, A.I., Kazaryan, D.E., Sofronova, E.A. Identification Control Synthesis
By The Network OperatorMethod // Proceedings 2015 IEEE 10th Conference on Industrial
Elec-tronics and Applications (ICIEA). 2015. pp. 1559–1564.

14. Diveev A.I., Sofronova E.A., Shmalko E.Yu. Metod identifikacionnogo sinteza upravleniya
i ego primenenie k mobil’nomu robotu [Method of identification synthesis of control
and its application to a mobile robot] // Information and Mathematical Technologies in

1276 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 
ISSN 2713-3206 (онлайн) www.ia.spcras.ru



____________R__O_B_O__T_IC__S_, _A_U_T_O__M_A__T_IO__N_ A__N_D_ _C_O_N__T_R_O_L_ _S_Y_S__T_E_M_S_____________

Science and Management [Informatsionnyye i matematicheskiye tekhnologii v nauke i
upravlenii]. 2016. vol. 2. pp. 53–61. (In Russ.)

15. Gautam P. System identification of nonlinear Inverted Pendulum using artificial neural net-
work // 2016 International Conference on Recent Advances and Innovations in Engineering
(ICRAIE). 2016. pp. 1–5.

16. Zheng D. D., Xie W. F., Luo C. Robust identification for singularly perturbed nonlinear
systems using multi-time-scale dynamic neural network // IEEE 56th Annual Conference
on Decision and Control (CDC). 2017. pp. 6487–6492.

17. Mohajerin N., Waslander S. L. Multistep prediction of dynamic systems with recurrent
neural networks //IEEE transactions on neural networks and learning systems. 2019. vol.
30. no. 11. pp. 3370–3383.

18. Khodabandehlou H., Fadali M. S. Nonlinear System Identification using Neural Networks
and Trajectory-Based Optimization //arXiv preprint arXiv:1804.10346. 2018.

19. Williams G. et al. Aggressive driving with model predictive path integral control // IEEE
International Conference on Robotics and Automation (ICRA). 2016. pp. 1433–1440.

20. Williams G. et al. Autonomous racing with autorally vehicles and differential games
//arXiv preprint arXiv:1707.04540. 2017.

21. Samal, M. K., Anavatti, S., Garratt, M. Neural Network Based System Identification for
Au-tonomous Flight of an Eagle Helicopter // IFAC Proceedings. 2008. vol. 41(2). pp.
7421—7426. 2008.

22. YuWang. A new concept using LSTM Neural Networks for dynamic system identification
// American Control Conference (ACC). 2017.

23. Brunton S.L., Proctor J.L., Kutz J.N. Discovering governing equations from data: Sparse
identi-fication of nonlinear dynamical systems. 2015.

24. Kaiser E., Kutz J. N., Brunton S. L. Sparse identification of nonlinear dynamics for model
predictive control in the low-data limit //Proceedings of the Royal Society A. 2018. vol.
474. no. 2219. P. 20180335.

25. Jian’an X., Mingjun Z., Jian Z. Kinematic model identification of autonomous mobile robot
using dynamical recurrent neural networks // IEEE International Conference Mechatronics
and Automation. 2005. vol. 3. pp. 1447–1450.

26. Roy T., Barai R.K. and Dey R. Identification of Differentially Driven Wheeled Mobile
Robot using Neural Networks // International Journal of Electrical, Electronics and
Computer Engineering. 2013. vol. 2(2). pp.38–45.

27. Lavrenov R., Magid E., Matsuno F., SvininM., Suthakorn J. Development and Implementa-
tion of Spline-based Path Planning Algorithm in ROS/Gazebo Environment // SPIIRAS
Pro-ceedings. 2019. Vol. 18. pp. 57-84.

28. Zhang B., Liu P. Control and benchmarking of a 7-DOF robotic arm using Gazebo and
ROS // PeerJ Computer Science. 2021. vol. 7.

29. URL: https://github.com/husarion/rosbot_description (accessed: 26.11.2021).
30. Šuster P., Jadlovská A. Tracking Trajectory of the Mobile Robot Khepera II Using

Approaches of Artificial Intelligence // Acta Electrotechnica et Informatica. vol. 11.
31. Data acquisition software package for network training in Gazebo simulator URL:

https://github.com/urock/rosbot (accessed: 26.11.2021).
32. Software package for training a neural network model URL: https://github.com/FastSense/

robot_model_training (accessed: 26.11.2021).
33. Kennedy J., Eberhart R. Particle swarm optimization //Proceedings of ICNN’95-

international conference on neural networks. IEEE, 1995. – vol. 4. pp. 1942–1948.
34. Diveev A., Shmalko E. Evolutionary Computation for Synthesis of Control System for

Group of Robots and Optimum Choice of Trajectories for their Movement // Proceedings
of the OPTIMA-2017 Conference, Petrovac, Montenegro. 2017. pp. 158–165.

Informatics and Automation. 2021. Vol. 20 No. 6. ISSN 2713-3192 (print) 1277
ISSN 2713-3206 (online) www.ia.spcras.ru



______Р_О__Б_О_Т_О__Т_Е_Х_Н__И_К_А_,_ А_В__Т_О_М__А_Т_И_З_А__Ц_И_Я_ _И_ _С_И_С__Т_Е_М_Ы__ У__П_Р_А_В__Л_Е_Н_И__Я______

35. Diveev, A.I., Konstantinov S.V. Issledovanie prakticheskoj skhodimosti evolyucionnyh
algoritmov optimal’nogo programmnogo upravleniya kolesnym robotom [Study of the
Practical Convergence of Evolutionary Algorithms for the Optimal Program Control of a
Wheeled Robot]. Journal of Computer and Systems Sciences International. 2018. vol. 57.
no. 4. pp. 80–106. (In Russ.)

1278 Информатика и автоматизация. 2021. Том 20 № 6. ISSN 2713-3192 (печ.) 
ISSN 2713-3206 (онлайн) www.ia.spcras.ru