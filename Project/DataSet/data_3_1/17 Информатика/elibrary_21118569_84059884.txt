ПРОГРАММНАЯ ИНЖЕНЕРИЯ

ЭЛЕМЕНТЫ СРЕДЫ РАЗРАБОТКИ 
ПРОГРАММНЫХ КОМПЛЕКСОВ НА ОСНОВЕ 

ОРГАНИЗАЦИИ МЕТАМОДЕЛИ 
ОБЪЕКТНОЙ СИСТЕМЫ

П.П. Олейник,
кандидат технических наук, доцент, системный архитектор 
программного обеспечения, ОАО «Астон»

E-mail: xsl@list.ru
Адрес: Ростовская обл., г. Шахты, пер. Бугроватый, 80

Рассмотрены основные элементы унифицированной среды быстрой разработки корпо-
ративных информационных систем различных прикладных предметных областей. Описана 
структура уровня доступа к данным, методика проектирования приложений и реализованные 
проекты. 

Ключевые слова: информационные системы (ИС), методы (паттерны) объектно-реляционного отобра-
жения, интегрированная среда разработки. 

Введение ства управления и обеспечения деятельности ком-
пании [1]. Разработка и внедрение единой КИС, 

еотъемлемой составляющей любого круп-

Н автоматизирующей все ключевые бизнес-процессы 
ного предприятия или организации явля-

организации, является неотъемлемым условием 
ется информационная система. В широком 

функционирования предприятия любой сферы 
смысле под информационной системой (ИС) по-

деятельности. В специфических условиях ведения 
нимают совокупность  технического, программ-
ного и организационного обеспечения, а также бизнеса постоянно возникают задачи доработки и 

персонала, предназначенная для того, чтобы сво- внесения изменений в существующий функцио-

евременно обеспечивать надлежащих людей над- нал. Именно поэтому многие крупные организации 

лежащей информацией. Крупным подклассом ИС предпочитают собственными силами разрабаты-

являются корпоративные информационные систе- вать программное обеспечение и внедрять у себя на 

мы (КИС) под которыми понимают определенную производстве. При этом выбор среды разработки и 

совокупность методов и решений, используемых языка программирования во многом определяется 
для создания единого информационного простран- именно возможностью быстрого внесения измене-

БИЗНЕС-ИНФОРМАТИКА №4(26)–2013 г. 69



ПРОГРАММНАЯ ИНЖЕНЕРИЯ

ний в систему. Основой КИС выступает хранилище (КОср). Т.к. рассматриваемая среда предназначена 
информации, т.е. база данных (БД). Автоматизация для разработки корпоративных информационных 
ключевых бизнес-процессов организации заключа- систем, то созданные КИС также должны удовлет-
ется в создании приложений БД.  В настоящее вре- ворять требованиям, предъявляемым к КИС [1] на 
мя широкое распространение получили реляцион- основании которых сформулированы следующие 
ные системы управления базами данных (РСУБД) КОср для SharpArchitect RAD Studio:
[2-3],  а для проектирования и реализации приложе- 1. Предусмотреть возможность описания любых 
ний используют объектно-ориентированные языки прикладных предметных областей. Заранее невоз-
программирования (ООЯП) [4-6]. Из-за различий в можно предугадать сферу применения системы, 
методах обработки информации (реляционная мо- поэтому необходим общий способ описания при-
дель построена на основе теории множеств и опери- кладных предметных областей. Имеет смысл ис-
рует группами строк, а ОО-парадигма основана на пользовать структурные диаграммы (например, 
принципах инкапсуляции и проектирования неза- диаграммы классов) языка UML и на основе их ин-
висимых классов, экземпляры которых могут иметь терпретации строить масштабируемые КИС [1, 22].
состояние и методы обработки) возникает так на-

2. Реализовать поддержку различных архитек-
зываемое объектно-реляционного несоответствие 

тур приложений. В настоящее время существует 
(Object-Relational Impedance Mismatch) [5] для 

множество различных архитектур от классической 
преодоления последствий которого используют ме-

двухзвенной «файл-сервер» до многозвенной архи-
тоды (паттерны/шаблоны) объектно-реляционного 

тектуры с поддержкой «распределенных объектов» 
отображения (ОРО, Object-Relational Mapping [4, 6]. Выбор оптимальной структуры во многом за-
(ORM) Patterns) [5-6]. Все имеющиеся паттерны висит от масштаба реализуемой КИС и аппаратных 
ОРО можно разделить на две большие категории: к возможностей, имеющихся у предприятия. Выпол-
первой относятся шаблоны, предназначенные для нение данного КО позволит своевременно и с ми-
представления иерархии классов конкретной пред- нимальными затратами масштабировать приложе-
метной области в виде набора таблиц реляционной ния при возрастающих потребностях организации.
БД (РБД) [5-6, 15]; работы второй категории пре-

3. Использовать современный язык программиро-
доставляют возможность организации метамодели 

вания и современной СУБД. Популярной парадиг-
объектной системы в РСУБД, которая использует-

мой сегодня является объектно-ориентированное 
ся для различных целей приложения [6-14, 17]. Ста-

программирование, поэтому использование соот-
тьи последней категории рассматривают различные 

ветствующего языка программирования является 
аспекты реализации популярной в настоящее время 

наиболее целесообразным [4]. Для хранения ин-
технологии, названной «архитектура, управляемая 

формации в настоящее время чаще всего исполь-
моделью (Model Driven Architecture, MDA)», позво-

зуют реляционные системы управления базами 
ляющей описать различные аспекты приложения и 

данных (РСУБД). Применение современных тех-
предполагающей создание среды разработки при-

нологий позволяет увеличить срок эксплуатации 
ложений.

системы и сократить затраты на ее владение [2].
В статье представлена архитектура унифициро-

4. Реализовать инфраструктуру безопасности. 
ванной среды разработки КИС, которая создава-

Разграничение прав доступа к данным и отобра-
лась под руководством автора в течение нескольких 

жение минимального набора информации, доста-
последних лет и апробирована в качестве целевой 

точного лишь для выполнения должностных обя-
платформы для реализации приложений различных 

занностей являются ключевыми особенностями 
предметных областей. Рассматриваемая среда бы-

разработки современных КИС [1]. Имеет смысл 
строй разработки получила название SharpArchitect 

предусмотреть возможность двух способов про-
RAD Studio.

верки подлинности пользователей: 1) внутренней - 
основанной на учетных записей, имеющихся в КИС 

1. Критерии оптимальности 
(чаще всего используется для Веб-приложений) и 

среды разработки 
2) встроенной – основанной на механизмах, предо-

Создание системы начнем с формирования тре- ставляемых операционной системой.

бований, критериев оптимальности (КО), которым 5. Обеспечить поддержку механизмов расшире-
должна удовлетворять реализация среды разработки ния функциональных возможностей среды раз-

70 БИЗНЕС-ИНФОРМАТИКА №4(26)–2013 г.



ПРОГРАММНАЯ ИНЖЕНЕРИЯ

работки. Современные языки программирования возможность наследоваться от них. При этом нали-
предоставляют обширную метаинформацию [4], чие множественного наследования предоставляет 
что позволяет реализовать «плагинную» архитек- широкие возможности моделирования задач при-
туру, поддерживающую установку модулей расши- кладной предметной области.
рений, представляющих собой dll-библиотеки [17]. Современные ООЯП имеют в своем арсенале бо-
Этот подход разрешает безгранично увеличивать гатый набор встроенных атомарных литеральных 
функционал системы и её гибкость.    типов. Поэтому необходимо предоставить подоб-

После того как представлены ключевые КОср ный функционал в разрабатываемой системе, что 

можно перейти к описанию внутренних особенно- соответствует требованию КОмм3 [6, 18].

стей реализации. Идея представления метамодели объектной си-
стемы не нова. В работах, посвященных стандар-

2. Структура метамодели ту ODMG 3.0 [19-20], и в работах, описывающих 
объектной системы SQL:2003 [21], имеются определённые решения. 

Но первый стандарт ориентирован лишь на удоб-
В широком смысле слова метамодель – это мо-

ство обработки метамодели с помощью встроенных 
дель, позволяющая описать другие модели. В на-

коллекций и итераторов, а второй – на представ-
шем понимании метамоделью является объектная 

ление сложных типов данных в РСУБД. Поэтому 
модель, которая описывает модель прикладной 

было принято решение самостоятельно разрабо-
предметной области. В основе рассматриваемой 

тать иерархию классов, полностью удовлетворяю-
среды разработки положена единая метамодель 

щую поставленной задаче. Результат представлен-
системы, реализованная в виде иерархии классов 

ный в данной работе основывается на работах [7-8, 
языка C#. Отметим, что сама метамодель хранится 

11-13, 16].
в виде таблиц РБД [7-14, 16-17].

На рис. 1, в виде диаграммы классов UML [4, 
При реализации были сформулированы следую-

22], представлена разработанная иерархия. Рас-
щие критерии оптимальности метамодели (КОмм) 

смотрим ее соответствие выделенным критериям 
[16]:

оптимальности. Иерархия соответствует требова-
1. Разработать единую иерархию, позволяю- ниям КОмм1, т.к. содержит все ключевые элемен-

щую представить ключевые элементы объектно- ты ОО-парадигмы: классы, атрибуты, ассоциации и 
ориентированной парадигмы, такие как классы, предоставляет возможность реализации. Выполне-
атрибуты, наследование (одиночное и множествен- ны и требования КОмм2, т.к. имеется возможность 
ное), ассоциации и т.п. предоставления базовых (системных) классов, реа-

2. Предусмотреть возможность предоставления лизующих наиболее общий функционал. Разрабо-

базовых (системных) классов, в которых реализо- танная иерархия классов представляет атомарные 

ван наиболее общий функционал литеральные типы, которые описывают распро-

3. Разработать иерархию атомарных литераль- страненные типы данных современных ООЯП, т.е. 

ных типов, представляющих наиболее распро- выполнены требования КОмм3. Следовательно, 

страненные типы данных современных объектно- разработанная иерархия удовлетворяет всем выде-

ориентированных языков программирования. ленным критериям оптимальности метамодели. 

Рассмотрим требования более подробно. Реали-
3. Организация уровня 

зация требования КОмм1 позволит унифициро-
доступа к данным

вано обрабатывать все элементы с помощью раз-
личных структур данных, например с помощью Общий процесс разработки корпоративной ин-
итераторов при формировании цикла. При этом формационной системы предполагает создание эк-
пользователю предоставляется возможность при- земпляров классов, образующих метамодель. Затем 
менять хорошо зарекомендовавшие себя объектно- самой системой выполняется интерпретация этой 
ориентированные подходы, как например наследо- информации и построения физического уровня до-
вание и организация ассоциаций. ступа к данным, который реализуется в виде набора 

КОмм2 требует наличия системных (встроенных) таблиц РСУБД. Это выполняется на основе реали-
классов. В общем случае пользователи не могут мо- зации методов объектно-реляционного отображе-
дифицировать поведение этих классов, но имеют ния (ОРО).

БИЗНЕС-ИНФОРМАТИКА №4(26)–2013 г. 71



ПРОГРАММНАЯ ИНЖЕНЕРИЯ

72 БИЗНЕС-ИНФОРМАТИКА №4(26)–2013 г.

Рис. 1. Иерархия классов метамодели объектной системы



ПРОГРАММНАЯ ИНЖЕНЕРИЯ

Рассмотрим основные методы ОРО, используе- требует внесения  изменений в структуру таблицы.
мые для представления иерархии классов в виде Методу присущи недостатки:
таблиц РБД (рис. 2) [5-6, 15, 17]. Метод Наследо-

 При изучении структуры таблиц БД могут воз-
вание с одной таблицей (Single Table Inheritance) 

никнуть проблемы, ведь не все имеющиеся столб-
физически представляет иерархию наследования 

цы таблицы предназначены для описания каждого 
классов в виде одной таблицы реляционной базы 

класса предметной области. Это усложняет процесс 
данных, столбцы которой соответствуют атрибу-

доработки системы в будущем.
там всех классов, входящих в иерархию и позволяет 

 При наличии глубокой иерархии наследования 
отобразить структуру наследования и минимизиро-

с большим количеством атрибутов многие столб-
вать количество соединений, которые необходимо 

цы могут иметь пустые значения (null-маркеры). 
выполнить для извлечения информации. В данном 

Это приводит к неэффективному использованию 
методе каждому экземпляру класса соответствует 

свободного пространства в БД. Однако современ-
одна строка таблицы. При создании объекта значе-

ные СУБД способны сжимать строки, содержащие 
ния заносятся только в те столбцы таблицы, кото-

большое количество отсутствующих значений. 
рые соответствуют атрибутам класса, а все осталь-
ные остаются пустыми (имеют null-значения).  Итоговая таблица может оказаться слишком 

большой и содержать огромное число столбцов. 
Метод имеет достоинства:

Основной способ оптимизировать запрос (сокра-
 В структуру БД присутствует лишь одна табли-

тить время выполнения) – создать покрывающий 
ца, представляющая все классы иерархии.

индекс. Однако множество индексов и большое 
 Для извлечения  экземпляров классов иерархии количество запросов к одной таблице способны 

нет необходимости выполнять соединение таблиц. привести к частыми блокировками, что будет ока-
 Перемещение полей из базового класса в про- зывать негативное влияние на производительность 

изводный (так же из производного в базовый) не программного приложения. 

Base Class TableBase
Base Class (абстрактный класс) (таблица)

(абстрактный класс) Attribute 1 Field1
Attribute 1

Table Class TableChild1
(таблица) (таблица)

BaseField1 Field2
ChildClass1 ChildClass2 Child1Field2 ChildClass1 ChildClass2

(класс) (класс) Child2Field3 (класс) (класс) TableChild2
SubChild21Field4

Attribute 2 Attribute 3 Attribute 2 Attribute 3 (таблица)

Field3

SubChildClass21 SubChildClass21 TableSubChild21
(класс) (класс) (таблица)

Attribute 4 Attribute 4 Field4

Метод Наследование с одной таблицей Метод Наследование с таблицами для каждого класса

Base Class TableChild1
(абстрактный класс) (таблица)

Attribute 1 Field1
Field2

TableChild2
(таблица)

ChildClass1 ChildClass2
(класс) (класс) Field1

Field3
Attribute 2 Attribute 3

TableSubChild21
(таблица)

SubChildClass21
(класс) Field1

Field3
Attribute 4

Field4

Метод Наследование с таблицами для каждого конкретного класса

Рис. 2. Методы объектно-реляционного отображения

БИЗНЕС-ИНФОРМАТИКА №4(26)–2013 г. 73



ПРОГРАММНАЯ ИНЖЕНЕРИЯ

Альтернативным является метод Наследова- вследствие чего ее удобно использовать в других 
ние с таблицами для каждого класса (Class Table приложениях, в которых не использован инстру-
Inheritance), представляющий иерархию классов по мент объектно-реляционного отображения.
одной таблице для любого класса (как абстрактного  При создании объектов определённого класса 
так и реализованного). Атрибуты класса отобража- в памяти приложения и извлечения данных из ре-
ются непосредственно на столбцы соответствую- ляционной базы данных выборка выполнятся из 
щей таблицы. При использовании данного метода одной таблицы, т.е. не требуется выполнять реля-
ключевой является задача соединения соответству- ционные соединения.
ющих строк нескольких таблиц БД, представляю-

 Доступ к таблице осуществляется только в слу-
щих единый объект предметной области. чае доступа к конкретному классу, что позволяет 

Методу присущи преимущества: снизить количество блокировок, накладываемых 

 В каждой таблице присутствуют лишь поля, со- на таблицу и распределить нагрузку на систему.

ответствующие атрибутам определённого класса. При этом имеются недостатки:
Поэтому таблицы легки в понимании и занимают  Первичные ключи могут быть неудобны в об-
мало места на жёстком диске. работке.

 Взаимосвязь между объектной моделью и схе-  Отсутствует возможность моделировать отно-
мой базы данных проста и понятна. шения (связи) между абстрактными классами.

Однако имеются недостатки:  Если атрибуты классов перемещаются между 
 При создании экземпляра определённого клас- суперклассами и производными классами, требу-

са необходимо выполнить загрузку данных из не- ется изменять структуру нескольких таблиц. Эти 
сколько таблиц, что требует либо их естественно- изменения будут не так часты, как в случае насле-
го соединения, либо множества обращений к базе дования с таблицами для каждого класса, однако их 
данных с последующим соединением результатов в нельзя игнорировать ( в отличие от метода Насле-
оперативной памяти. дование с одной таблицей, в котором эти измене-

 Перемещение полей в производный класс или ния  вообще отсутствуют).

суперкласс требует изменения структуры несколь-  Если в суперклассе изменить определение хотя 
ких таблиц. бы одного атрибута (например, поменять тип дан-

 Таблицы суперклассов могут стать слабым ных), это потребует изменить структуру каждой 

местом в вопросах производительности, посколь- таблицы, представляющей производный класс, по-

ку доступ к таким таблицам будет осуществляться скольку поля суперкласса дублируются во всех та-

слишком часто, что приведёт к множеству блоки- блицах его производных классов.

ровок.  При реализации метода поиска данных в аб-

 Высокая степень нормализации может стать страктном классе потребуется просматривать все 

препятствием к выполнению незапланированных таблицы, представляющие экземпляры произво-

заранее запросов. дных классов. Это требует большого количества об-
ращений к базе данных.

Метод Наследование с таблицами для каждо-
го конкретного класса (Concrete Table Inheritance) Выбор паттерна ОРО зависит от опций, указан-

представляет иерархию наследования классов, ис- ных разработчиком КИС в метамодели.

пользующий по одной таблице для каждого реали-
зованного (неабстрактного) класса этой иерархии. 4. Реализованные проекты

С практической точки зрения данный метод пред-
Проект SharpArchitect RAD Studio разрабатывал-

полагает, что каждый экземпляр класса (объект), 
ся в последние несколько лет и был использован 

который находится в оперативной памяти, будет 
как для  научных целей, так и с целью практической 

отображён на отдельную строку таблицы. При этом 
разработки приложений. Для тестирования функ-

каждая таблица в нашем случае содержит столбцы, 
циональных особенностей и корректности работы 

соответствующие атрибутам как конкретного клас-
механизма ОРО создана соответствующая модель, 

са, так всех его предков. 
представленная в работе [15]. В среде разработа-

Преимуществами являются то, что: но 12 дипломных проектов, выполненных в каче-
 Каждая таблица не содержит лишних полей, стве квалификационных работ в государственных 

74 БИЗНЕС-ИНФОРМАТИКА №4(26)–2013 г.



ПРОГРАММНАЯ ИНЖЕНЕРИЯ

ВУЗах РФ: в ШИ (ф) ЮГТУ (НПИ) и ИГХТУ. Каж- ского анализа, методов статистического анализа и 
дый программный продукт представляет из себя различных их комбинаций. В качестве тестового 
учетную систему, содержащую от 30 до 50 классов массива данных использованы тиковые котировки, 
предметной области, каждый их которых хранит не составляющие более 1 Гб данных в сутки. 
менее 100 экземпляров.

В качестве первой крупной реализации созда- Заключение 

на информационная система проведения научных 
Все реализованные проекты представляют собой 

конференций SharpArchitect Scientific Conference 
выполняемые Windows-приложения, предостав-

Manager [23], которая используется при проведе-
ляющие развитый интуитивно-понятный поль-

нии конференции «Объектные системы» (www.
зовательский интерфейс. При этом использована 

objectsystems.ru). Работа ведется с 2010 года и реа-
лизованы все ключевые модули, позволяющие от- возможность создания классических двухзвенных 

слеживать жизненный цикл научной статьи от пе- приложений на основе архитектуры «клиент-сервер» 

ресылки ее автором в Оргкомитет, рецензирования и трехзвенных, с выделенным сервером приложе-

и до отслеживания статуса отосланного сборника ний. В настоящее время все большую популярность 

научных трудов по почте [24-25]. В настоящий мо- получают Веб-технологии. Поэтому ведутся работы 

мент в системе храниться информация более чем по реализации Веб-модуля, позволяющего генери-

о 300 авторах, 200 статьях и 7 проведенных конфе- ровать соответствующие приложения. 

ренций. Также разрабатывается официальный Веб-сайт 

Вторым крупным проектом является реализация www.sharparchitect.com, который будет посвящен 

платформы  создания и  управления торговыми реализованным проектам в SharpArchitect RAD 

биржевыми роботами, архитектура которой пред- Studio. Планируется разработать мультимедиа ру-

ставлена в работах [26]. На базе платформы созда- ководство по функциональным возможностям и 

но более 20 высокочастотных торговых стратегий, по принципам разработки приложений. Первый 

одновременно торгующих в режиме реального обучающий видео-ролик доступен заинтересован-

времени на бирже РТС. Работа системы протести- ному читателю по адресу https://www.youtube.com/

рована на основе реализации алгоритмов техниче- watch?v=BtfEGdSKHEo. 

Литература

1. Олейник П. П. Корпоративные информационные системы: Учебник для вузов. Стандарт третьего по-
коления. – СПб.: Питер, 2012. 

2. Коннолли Т., Бегг К. Базы данных. Проектирование, реализация и сопровождение. Теория и практи-
ка. 3-е издание: Пер. с англ. – М.: Издательский дом «Вильямс», 2003. 

3. Дейт К.Дж. Введение в системы баз данных, 7-е издание: Пер. с англ. – М.: Издательский дом «Ви-
льямс», 2001. 

4. Грэхем И. Объектно-ориентированные методы. Принципы и практика. 3-е издание: Пер. с англ. – М.: 
Издательский дом «Вильямс», 2004. 

5. Ambler S.W. Agile Database Techniques – Effective Strategies for the Agile Software. – John Wiley & Sons, 
2003. 

6. Флауер М. Архитектура корпоративных программных приложений: Пер. с англ. – М.: Издательский 
дом «Вильямс», 2004. 

7. Олейник П.П. Представление метамодели объектной системы в реляционной базе данных // Известия 
высших учебных заведений. Северо-Кавказский регион. Спецвыпуск «Математическое моделирова-
ние и компьютерные технологии», 2005. – С. 3-8.

8. Олейник П.П. Организация метамодели объектной системы на основе реляционной СУБД // Научное 
творчество молодёжи: Материалы X Всероссийской научно-практической конференции (21-22 апреля 
2006 г.) Ч. 1. – Томск: Изд-во Томского ун-та, 2006. – С. 87-88.

9. Олейник П.П. Критерии построения унифицированных хранимых процедур выборки в реляцион-
ной БД // Математические методы и информационные технологии в экономике, социологии и об-
разовании: Сборник статей XIX Международной научно-технической конференции, г. Пенза, 24-25 
мая 2007 г. / Пензенская гос. технолог. акад. – Пенза, 2007. – С. 167-170.

БИЗНЕС-ИНФОРМАТИКА №4(26)–2013 г. 75



ПРОГРАММНАЯ ИНЖЕНЕРИЯ

10. Олейник П.П. Об одном способе реализации процедур выборки данных // Международная научно-
практическая конференция ИТО Поволжье – 2007. Российский научный семинар «Методы информа-
ционных технологий, математического моделирования и компьютерной математики в фундаменталь-
ных и прикладных научных исследованиях». (18-21 июня 2007 г.) // Материалы конференции и труды 
семинара. – Казань: Изд-во «Филиантъ», 2007. – С. 65-67.

11. Олейник П.П. К вопросу о необходимости проектирования иерархии атомарных литеральных типов 
для объектной системы, организованной в РСУБД // Информационно-вычислительные технологии и 
их приложения. IX Международная научно-техническая конференция: сборник статей. – Пенза: РИО 
ПГСХА, 2008. – С. 201-205.

12. Олейник П.П. Организация иерархии атомарных литеральных типов в объектной системе, построен-
ной на основе РСУБД // Программирование. – 2009. – № 4. – С. 73-80.

13. Oleynik P.P. Implementation of the Hierarchy of Atomic Literal Types in an Object System Based of RDBMS // 
Programming and Computer Software. – 2009. – Vol. 35, No.4. – P. 235-240.

14. Олейник П.П. Организация серверного уровня доступа к данным объектной системы, построенной на 
основе РСУБД // Автоматизация и современные технологии. Ежемесячный межотраслевой научно-
технический журнал. – 2009. – № 6. – С. 15-19.

15. Олейник П.П. Унифицированная модель для тестирования инструментов объектно-реляционного 
отображения // Объектные системы - 2011: материалы III Международной научно-практической кон-
ференции (Ростов-на-Дону, 10-12 мая 2011 г.) / Под общ. ред. П.П. Олейника. – Ростов-на-Дону, 2011. 
– С. 65-69.

16. Олейник П.П. Иерархия классов метамодели объектной системы // Объектные системы – 2012: мате-
риалы VI Международной научно-практической конференции (Ростов-на-Дону, 10-12 мая 2012 г.) / 
Под общ. ред. П.П. Олейника. – Ростов-на-Дону: ШИ ЮРГТУ (НПИ), 2012. – С. 37-40.

17. Олейник П.П. Методика построения унифицированных трёхзвенных объектно-ориентированных 
приложений. – Saarbr cken, Germany: LAP LAMBERT Academic Publishing, 2011. 

18. Фаулер М., Бек К., Брант Д., Робертс Д., Апдайк У. Рефакторинг: улучшение существующего кода. – 
М: Символ-Плюс, 2008. 

19. Cattell R.G., Barry D.K. The Object Data Standard:ODMG 3.0. – Morgan Kaufmann Publishers, 2000. 
20. Джордан Д. Обработка объектных баз данных на C++. Программирование по стандарту ODMG: Пер. 

с англ.: Уч. пос. – М.: Издательский дом «Вильямс», 2001. 
21. Calero C., Ruiz F. and oth. An ontological approach to describe the SQL:2003 ob-ject-relational features, 

Ontologies for Software Engineering and Software Technology. – Berlin Heidelberg: Springer, 2006. – P. 197-
215.

22. Новиков Ф.А., Иванов Д.Ю. Моделирование на UML. Теория, практика, видеокурс. – СПб.: Профес-
сиональная литература, Наука и Техника, 2010. 

23. Олейник П.П. Информационная система проведения научных конференций SharpArchitect Scientific 
Conference Manager // Свидетельство об официальной регистрации программы для ЭВМ № 2013610565, 
9 января 2013 г. – М.: ВНТИЦ, 2013.

24. Олейник П.П. Опыт применения инструментов объектно-реляционного отображения при разработ-
ке информационной системы каталогизирования научных работ // Информационные технологии в 
науке, экономике и образовании: материалы 5-й Всероссийской научно-практической конференции 
2-3 сентября 2010 года / под. ред. О.Б. Кудряшовой; Алт. гос. техн. ун-т, БТИ. – Бийск: Изд-во Алт. гос. 
техн. ун-та, 2010. – С. 102-105.

25. Олейник П.П., Игумнов Е.А., Свечкарёв Е.А. Опыт проектирования информационной системы для 
каталогизирования научных работ при проведении международных конференций // Объектные си-
стемы - 2010: материалы II Международной научно-практической конференции. Россия, Ростов-на-
Дону, 10-12 ноября 2010 г., Ростов-на-Дону, 2010. – С. 48-51.

26. Oleynik P.P. The implementation of the framework to create and manage exchange trading robots // Object 
Systems – 2011 (English session): Proceedings of the Fourth International Theoretical and Practical Conference. 
Rostov-on-Don, Russia, 10-12 November, 2011. Edited by Pavel P. Oleynik, P. 42-45. 

76 БИЗНЕС-ИНФОРМАТИКА №4(26)–2013 г.