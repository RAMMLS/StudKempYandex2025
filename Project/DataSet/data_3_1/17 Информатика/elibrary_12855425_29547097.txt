éîæïòíáôéëá é å¿ ðòéíåîåîéñ, 2007. ô. 1. ÷ÙÐ. 2. ó. 1538

КОНСТРУИРОВАНИЕ КАНОНИЧЕСКИХ ИНФОРМАЦИОННЫХ
МОДЕЛЕЙ ДЛЯ ИНТЕГРИРОВАННЫХ ИНФОРМАЦИОННЫХ
СИСТЕМ∗

В. Н. Захаров1, Л. А. Калиниченко2, И. А. Соколов3, С. А. Ступников4

Аннотация: Рассматривается проблема унификации неоднородных моделей представления информации
(баз данных, онтологий, сервисов, процессов) при проектировании распределенных информационных
систем с разнородными информационными ресурсами. Особое внимание уделено верифицируемым ме-
тодам отображения информационных моделей и синтеза расширяемых канонических информационных
моделей. Предложена архитектура Унификатора информационных моделей и дан пример отображе-
ния конкретной информационной модели в каноническую. Дано сравнение предложенных методов с
известными подходами в мировой практике.

Ключевые слова: информационная модель; семантика информационной модели; отображение моделей;
коммутативность отображения модели; каноническая модель; синтез канонической модели; расширение
канонической модели; принцип уточнения; верификация уточнения моделей; унификатор информаци-
онных моделей; метакомпиляция

1 Введение необходимости ее описания в терминах фундамен-
тальных принципов, которые вскрывали бы глу-

Статья посвящена изучению, трансформации бинные структуры этой науки и показывали, как их
и унификации моделей представления информа- можно применить в других областях. К основным
ции в процессе проектирования и разработки инте- категориям таких принципов (важных в контексте
грированных, интероперабельных информацион- настоящей статьи) относятся [2]:
ных систем. Это важная проблема информатики
как науки, изучающей естественные и искусствен- – категория вычислений, рассматриваемых как
ные информационные процессы. С нарастающей последовательности трансформаций представ-
интенсивностью информатику рассматривают как лений информации в разнообразных информа-
естественную науку [1] (наряду с другими есте- ционных моделях;
ственными науками), а не как науку, изучающую – категория координации (например, коопера-
лишь сущности, искусственно созданные челове- ции сетевых агентов), рассматриваемой как
ком. Информационные процессы являются частью интероперабельность (совместная работа) со-
природных явлений: примеры таковых общеизвест- вокупности агентов в рамках конечных или
ны в молекулярной биологии, квантовой физике, в бесконечных деятельностей (координируемых
экономике, в социальных процессах и пр. Инфор- протоколами) для достижения некоторой об-
матика, таким образом, изучает как естественные, щей цели. Задачи (работы), возникающие при
так и искусственные информационные процессы. координации, могут быть делегированы вы-
Понимаемая широко (как computing [2]), инфор- числительным процессам. При координации
матика включает вычислительную науку (computer агенты обмениваются информацией, представ-
science), компьютерную инженерию и инженерию ленной в разнообразных информационных мо-
программ, информационные технологии (ИТ), делях;
информационную науку (information science),
инженерию информационных систем. Трактовка – категория запоминания (хранение и извлечение
информатики как естественной науки приводит к информации), реализуемого системами хране-

∗Работа выполнена при финансовой поддержке РФФИ (проект 06-07-08072-офи-а) и программы ОИТВС РАН «Фундаменталь-
ные основы информационных технологий и систем» (проект 1-10).

1Институт проблем информатики Российской академии наук, vzakharov@ipiran.ru
2Институт проблем информатики Российской академии наук, leonidk@synth.ipi.ac.ru
3Институт проблем информатики Российской академии наук, isokolov@ipiran.ru
4Институт проблем информатики Российской академии наук, ssa@ipi.ac.ru

15



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

ния информации, представляемой в той или подобным процессом создания информационных
иной информационной модели. моделей. Это развитие происходит как в рам-

ках конкретных инфраструктур (таких как архи-
Собственно, эти категории являются основопо- тектуры OMG, в частности архитектура CORBA,

лагающими для описания информационных про- архитектуры, движимые моделями представления
цессов, а модели представления информации (или информации (MDA), архитектуры семантического
информационные модели) составляют их базис. Веба, сервис-ориентированные архитектуры, архи-
Настоящая работа выполнена при поддержке про- тектуры электронных библиотек, архитектуры ин-
екта РФФИ 06-07-08072-офи-а (проекты конкурсов формационных грид систем), так и в стандартах
РФФИ офи (ориентированные фундаментальные конкретных информационных моделей — моделей
исследования) имеют целью дальнейшее продвиже- данных (таких как, например, ODMG 2000, SQL
ние тех ранее поддержанных в научных организаци- 2003, UML, стеки XML и RDF моделей данных),
ях фундаментальных исследований, в ходе работы моделей потоков работ (например, Staffware, COSA,
над которыми исследователи обнаружили возмож- InConcert, Eastman, FLOWer, Domino, Meteor, Mo-
ность использования результатов при создании bile, MQSeries, Forte, Verve, Vis. WF, Changeng, IFlow,
новых технологий, материалов и услуг). Поэтому SAP/R3), языков процессной композиции сервисов
она скорее является прагматической, нежели тео- (XPDL, BPEL4WS, BPML, XLANG, WSFL, WSCI),
ретической или тем более философской. Вышеска- семантических моделей (включая онтологические
занное позволяет, однако, определить место данных модели и модели метаданных), моделей цифро-
исследований и разработок в контексте информа- вых репозиториев данных и знаний в конкретных
тики как науки об информационных процессах. областях бизнеса, торговли, науки и многих дру-

Известно (разработано) большое число моделей гих. Основу названных моделей составляют раз-
представления информации как природных, так и нообразные понятия и парадигмы, не совместимые
искусственно созданных. Природные информаци- между собой. Этот процесс сопровождается дру-
онные модели для изучения преобразуются в ис- гой тенденцией — накоплением использующих по-
кусственные модели, реализуемые на компьютере. добные модели информационных ресурсов, число
Поэтому в дальнейшем статья будет сосредоточена которых экспоненциально растет. Такой рост вызы-
на искусственных моделях (соответствие естествен- вает все увеличивающуюся потребность совместно-
ных моделей искусственным можно проследить на го использования (интеграции) модельно неодно-
примере биологических моделей [4, 3], астроно- родных информационных компонентов и сервисов
мических моделей [6, 5] и др.; существенно, что в различных применениях, а также их повторно-
одной природной модели, как правило, соответ- го использования и композиции для реализации
ствует значительное число искусственных моделей, интероперабельных информационных систем [7].
с той или иной степенью подробности отражающих Указанные тенденции противоречивы: чем больше
ее семантику). Следует оговориться, что под ин- разнообразие применяемых моделей в различных
формационными моделями понимаются языки для ресурсах, тем более сложными становятся пробле-
описания структуры информации, ее семантики, а мы их интеграции и композиции. Эти тенденции не
также операций, определяющих характерные пре- новы, но с течением времени разнообразие моде-
образования информации в такой модели. Модель лей (величина «Вавилонской башни» моделей) и их
ДНК служит примером подобного языка в молеку- сложность растут вместе с ростом потребности до-
лярной биологии. Он позволяет описывать общие стижения интеграции и композиции разномодель-
генетические модели, представления конкретных ных компонентов и сервисов при решении задач.
структур (генов) и содержит специальные опера- Предел возможности интеграции и композиции ре-
ции трансформации таких структур. Отображе- сурсов близок к достижению: уже сейчас зачастую
ния модели ДНК в разнообразные искусственные проще создать новый ресурс, чем найти и правиль-
компьютерные информационные модели активно но применить существующий.
изучались, например, в [4]. Масштабы конструирования интероперабель-

В различных областях науки (как и в различ- ных систем или систем интеграции разнородных
ных областях деятельности людей вообще) на- информационных ресурсов (далее для краткости
блюдается экспоненциальный рост объема накап- И-систем) для решения задач в разнообразных
ливаемых экспериментальных (наблюдательных) областях государственного управления, производ-
данных, оформляемых в виде информационных ре- ства, бизнеса, науки и культуры огромны и про-
сурсов, каждый из которых представлен средствами должают быстро расти. То, что и интероперабель-
определенной информационной модели. Настоя- ные системы, и системы интеграции разнородных
щий период развития ИТ характеризуется взрыво- ресурсов объединены здесь под общим названи-

16 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007



Конструирование канонических информационных моделей для интегрированных информационных систем

ем И-системы, не случайно. Интероперабельность моделей удается получать удовлетворительные ре-
означает совместную работу ресурсов при реше- зультаты. Такая практика, особенно для объектных
нии конкретной задачи. Для этого нужно, чтобы и процессных моделей, оборачивается дорогостоя-
композиция ресурсов, выполняющих совместную щим, длительным и малообоснованным процессом
работу, семантически реализовывала части именно получения унифицирующих спецификаций вруч-
этой задачи [8]. При интеграции неоднородных ную, либо приводит к практической неосуществи-
ресурсов нужно уметь семантически отождествлять мости интеграции (композиции) готовых ресурсов.
объекты, представленные в различных информаци- Следовательно, для эффективного конструиро-
онных моделях, и семантически правильно отобра- вания И-систем требуются специальные методы и
жать схемы интегрируемых ресурсов в глобальную инструменты. Для унификации разнородных спе-
схему. Поскольку в общем случае ресурсы не- цификаций прежде всего требуется умение сопо-
однородны (представлены в различных моделях), ставлять спецификации различных ресурсов друг
при создании как интероперабельных систем, так с другом так, чтобы можно было отвечать на во-
и систем интеграции неоднородных ресурсов для прос, можно ли при реализации И-системы ис-
однородного представления их семантики требует- пользовать спецификацию существующего ресурса
ся приведение различных информационных моде- вместо фрагмента спецификации И-системы. Для
лей к унифицированному виду в рамках некоторой этого достаточно доказать, что рассматриваемые
унифицирующей информационной модели, кото- спецификации находятся в отношении уточнения.
рая называется канонической. Говорят, что спецификация A уточняет специфи-

Вместе с тем применяемые методологические кацию D, если A можно использовать вместо D
и технологические приемы создания И-систем так, что пользователь D не будет замечать этой за-
не обладают необходимыми даже минимальными мены. Средства доказательства факта уточнения
средствами унифицированного описания семан- спецификации некоторого компонента специфи-
тики разнородных компонентов и поэтому мало- кацией другого компонента (реализуемые на основе
эффективны. Как уже было показано, проблемы теоретико-модельных нотаций и соответствующего
конструирования И-систем порождаются разли- инструментария) составляют фундамент предлага-
чием моделей (синтаксиса и семантики языков) емых методов конструирования унифицирующих
представления информационных ресурсов, под- (канонических) моделей представления информа-
лежащих интеграции или композиции в составе ции в И-системах. Каноническая информационная
И-системы. В такие модели входит и язык, на модель служит в качестве общего языка, эсперанто,
котором выражается спецификация требуемой (бу- для адекватного выражения семантики разнообраз-
дущей) системы. Такие языки перекрывают широ- ных моделей представления информации, исполь-
кий спектр средств моделирования информации, зуемых в ресурсах И-системы.
включая структуры (типы) данных и их семанти- Основной принцип синтеза канонической ин-
ку, алгоритмы вычислительных функций и методов, формационной модели для И-системы состоит
спецификации одновременных процессов (потоков в расширяемости ее ядра в разнородной среде,
работ). включающей различные информационные моде-

Процессы интеграции или композиции ресур- ли, используемые для представления ресурсов кон-
сов при конструировании И-систем оказываются кретной И-системы. Ядро канонической модели
неосуществимыми при попытке манипулирования фиксируется. Для каждой конкретной информаци-
разномодельными спецификациями компонентов. онной модели Mi среды определяется расширение
Единственный практический выход — приведе- ядра канонической модели так, чтобы оно вместе
ние разномодельных спецификаций к общей, уни- с ядром уточнялось бы моделью Mi. Такая уточ-
фицированной модели. Такое семантическое няющая трансформация моделей должна быть до-
преобразование разномодельных спецификаций к казуемо правильной. Каноническая модель среды
унифицированному виду в канонической модели синтезируется как объединение расширений, обра-
нуждается в специальных методах и инструменталь- зованных для моделей Mi среды.
ных средствах, которых нет в практике проектиро- На протяжении длительного периода времени
вания И-систем. Приходится полагаться на ин- в лаборатории композиционных методов проек-
туитивные приемы отождествления спецификаций тирования информационных систем ИПИ РАН
требуемых ресурсов с заданными свойствами и про- разрабатывались методы синтеза канонических
водить преобразования информационных моделей моделей для широкого спектра реальных информа-
вручную, без точного учета семантики используе- ционных моделей: структурированных, объектных,
мых моделей и подтверждения правильности вы- сервисных, процессных, включая произвольные их
полняемых преобразований. Лишь для простейших комбинации [9–20]. При этом рассматриваются

ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007 17



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

полные спецификации моделей (языков), включая информационных моделей ресурсов к канониче-
средства описания как информационных струк- скому, унифицированному представлению и реали-
тур (типов данных), так и поведения (операций, зует стратегически важный этап конструирования
функций и процессов) [14, 15, 21]. И-систем.

При преобразовании структурированных, сла- Методы конструирования расширяемой кано-

боструктурированных и объектных моделей в нической информационной модели для И-систем,

каноническую разработанные методы сохраняют функции и архитектура Унификатора моделей и

информацию и операции в соответствии с прин- пример отображения конкретной информацион-
ципом уточнения [21]. Отображение процессов при ной модели в каноническую в процессе ее расши-

синтезе их канонической модели требует сохране- рения рассматриваются в последующих разделах

ния семантики одновременного поведения (con- статьи.
currency). В 2004 г. авторы, используя недавно
обнаруженную возможность интерпретации про-
цессных событий в формальных методах специфи- 2 Метод конструирования
кации [22–25], создали метод конструирования до- унифицирующих
казательных уточнений процессных спецификаций
и синтезировали расширяемую каноническую про- информационных моделей
цессную модель для широкого класса процессных В данном разделе рассматривается подход к
моделей (сотни таких моделей используются в мире строгому определению информационных моделей
только в различных коммерческих системах управ- и использованию их как формальных объектов в
ления потоками работ), языков процессной ком- процессе синтеза канонической информационной
позиции веб-сервисов [26]. Этот результат завер- модели. Каждая информационная модель опреде-
шил многолетние исследования и позволил достичь ляется синтаксисом и семантикой двух языков —
совмещения двух практически важных требова- языка определения информации, описывающей
ний — полноты охвата канонической моделью се- состояние некоторой системы (информационно-
мантики разнообразных требующихся на практике го ресурса или И-системы), и языка оперирования
моделей представления информации с доказатель- такими состояниями (информацией, характеризу-
ностью правильности представления в расширяе- ющей состояние). При отображении некоторой
мой канонической модели разнообразных практи- информационной модели ресурса (исходной мо-
чески используемых моделей. Эти результаты были дели) в каноническую информационную модель
опубликованы в [15]. Таким образом, решение (целевую) необходимо сохранение информации и
многих актуальных практических задач стало более операций. Для этого достаточно, чтобы целевая
обоснованным (например, конструирование вирту- модель уточнялась исходной моделью1. Установле-
альных организаций, трейдинг процессов или сер- ние факта уточнения моделей требует проведения
висов). формального доказательства, реализация которого

Однако, ввиду взрывоподобного расширения возможна в формальной информационной моде-
разнообразия информационных моделей, при ис- ли, которая в дальнейшем называется абстрактной
пользовании разработанных методов отображения информационной метамоделью.
спецификаций ресурсов в спецификации И-систем Понятие уточнения моделей данных определяет-
и синтеза канонических моделей И-систем и при- ся следующим образом. Тип данных в исходной
менении теории уточнения невозможно справлять- модели ts уточняет тип целевой модели tt, если и
ся вручную с такой «Вавилонской башней» ин- только если они отображаются в две спецификации
формационных моделей. Поэтому представляется абстрактной метамодели данных так, что образ ти-
важным создание Конструктора унифицирующих па ts в исходной модели является уточнением образа
информационных моделей (Унификатора моде- типа tt в целевой модели.
лей, для краткости) для автоматизации разработан- Схема системы Ss уточняет схему St, если и
ных методов синтеза канонических моделей при только если для каждого типа ts в Ss есть тип tt в St

проектировании И-систем. Унификатор позволяет (и St не содержит других типов) такой, что ts явля-
доказательно приводить множество разнотипных ется уточнением tt. Модель данных Ms уточняет

1Исходная информационная модель Ms эквивалентна целевой информационной модели Mt, если Mt уточняется Ms и Ms

уточняется Mt. Для целей создания И-систем достаточно рассматривать уточнение модели Mt моделью Ms. Установление
факта эквивалентности моделей при использовании предлагаемого подхода возможно, но является избыточным. Вообще говоря,
употребление эквивалентности моделей может определяться видом абстрактной метамодели и техникой построения отображения
моделей. Так, в работе [11] при построении отображений моделей в денотационной семантике подтверждалась эквивалентность
моделей при их отображении.

18 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007



Конструирование канонических информационных моделей для интегрированных информационных систем

модель данных Mt, если и только если для каждой определения. Это позволяет в данном рассмотре-
допустимой схемы Ss в Ms существует допустимая нии ограничиться только диаграммой отображения
схема St в Mt такая, что Ss является уточнени- схем.
ем St.

Основные принципы синтеза канонической
информационной модели формулируются следу- Принцип синтеза унифицирующей канонической ин-
ющим образом. формационной модели. Синтез канонической мо-

дели есть процесс построения расширений ядра
канонической модели, уточняемых различными

Принцип расширения информационных моделей дан-
ных. информационными моделями ресурсов, включа-

Каноническая модель должна быть расши-
емыми в среду И-системы, а также процесс сли-

ряемой. Расширение канонической модели проис-
яния этих расширений c канонической моделью.

ходит при рассмотрении каждой новой исходной
В создаваемой согласно этому принципу унифици-

модели: целевая модель расширяется путем добав-
рующей канонической модели разнообразные ис-

ления к ее языку определения информации но-
ходные модели имеют однородное представление,

вых (измененных) типов данных, которые могут
уточняемое такими исходными моделями.

быть уточнены определениями типов исходной мо-
дели.

2.1 Абстрактная информационная
Принцип коммутативного отображения информаци- метамодель
онных моделей. При отображении исходной мо-
дели в каноническую необходимо сохранение ин- В настоящей работе в качестве абстрактной ин-
формации и операций. Это требование достигается, формационной метамодели используется Нотация
если отображение моделей данных является комму- абстрактных машин (Abstract Machine Notation,
тативным. AMN). Язык AMN обеспечивает манипулирова-

Множество всех схем систем, которые могут ние теоретико-множественными спецификация-
быть выражены на языке определения информа- ми в логике первого порядка и доказательство
ции модели Mi, обозначается Si. Множество спе- уточнения спецификаций [27–29]. Специальные
цификаций абстрактной метамодели, прообра- инструментальные средства (B-технология [27])
зами которых при семантическом отображении предоставляют возможность доказательства ком-
являются схемы из Si, обозначается Bi. Обозначим
Msi : Si →

мутативности диаграмм отображения моделей по-
Bi семантическую функцию моделиMi. луавтоматическим способом: теоремы, требуемые

Отображение f = 〈σ, θ〉 модели Mj в расширение для доказательства уточнения моделей, генериру-
Mij модели Mi коммутативно, если выполняются ются средствами B-технологии автоматически, но
следующие условия: их доказательство может быть интерактивным.

– диаграмма отображения схем языков определе- Язык AMN как теоретико-модельная нотация
ния информации является коммутативной: позволяет рассматривать состояния и операции

Msij системы интегрированно как спецификацию про-
Si × {Ÿij} - Bij

6 6 странства состояний и поведения (определенного
операциями на состояниях) абстрактных машин.

σ θ Спецификация состояния абстрактной машины
вводится переменными состояния вместе с инва-

Msj
S риантами — ограничениями, которые должны все-

j - Bj
гда удовлетворяться. Операции определяются на

– отображение θ является уточнением. основе расширения формализма охраняемых ко-
Здесь Ÿij обозначает множество новых (моди- манд Дейкстры. Ключевым понятием AMN явля-

фицированных) типов расширения целевой моде- ется уточнение, позволяющее соотносить специ-
ли, обеспечивающих конструирование необходи- фикации систем различных уровней абстракции.
мых уточнений типами исходной модели. Уточняющая спецификация может быть значитель-

Аналогичную диаграмму следует дать для отоб- но более детальной, чем уточняемая специфика-
ражения средств языка манипулирования инфор- ция. Конструируется уточняющая спецификация
мацией. Однако, поскольку рассматриваемая в на основе алгоритмического уточнения и уточне-
работе каноническая модель является объектной, ния данных [28]. Уточнение формализуется в AMN
основные операции манипулирования информа- путем формулировки ряда теорем специального ви-
цией определены в составе типов и классов языка да, так называемых proof obligations. Такие теоремы

ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007 19



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

формулируются автоматически при помощи ин- 2.3 Виды конструкций и структурные
струментальных средств поддержки В-технологии механизмы AMN
(B-Toolkit [30], AntelierB [31]) на основании склеи-
вающих инвариантов, соотносящих состояния уточ- В AMN существует три вида конструкций:
няемой и уточняющей систем. Теоремы могут быть (1) абстрактная машина (abstract machine);
доказаны при помощи инструментальных средств (2) уточнение (refinement);
поддержки автоматического и(или) интерактивно-
го доказательства. (3) реализация (implementation).

Абстрактная машина может быть только уточ-
няемой конструкцией, и при описании операций

2.2 Спецификация операций в AMN абстрактной машины не разрешается использо-
Операции абстрактных машин основаны на вать последовательную и циклическую подстанов-

обобщенных подстановках. Любая операция в ки. Реализация может быть только уточняемой
AMN имеет следующий вид конструкцией, при описании операций реализации

не разрешается использовать недетерминирован-
r1, . . . , rn ← op(p1, . . . , pm) = S . ные подстановки (SELECT, ANY), параллельную

подстановку и предусловие. Реализации также не
Здесь op— имя операции, r1, . . . , rn — выходные разрешается иметь собственных переменных. Уточ-

параметры операции, p1, . . . , pm — входные пара- нение является более универсальной конструкци-
метры операции, S — подстановка, определяющая ей, так как может использоваться как в качестве
действие операции на пространстве состояний. уточняемой, так и в качестве уточняющей кон-

Язык обобщенных подстановок (Generalized струкции, язык описания операций уточнения не
Substitution Language, GSL) позволяет описывать имеет таких ограничений как в абстрактной маши-
переходы между состояниями системы. Каждая не, так и в реализации. Поэтому конструкция уточ-
обобщенная подстановка S определяет преобразо- нения является наиболее предпочтительной для од-
ватель предиката, связывающий некоторое пост- нородного представления в AMN спецификаций
условие R со своим слабейшим предусловием [S]R, канонической модели.
что гарантирует сохранение R после выполнения Уточнение выглядит следующим образом.
операции. В этом случае говорят, что S уста-
навливает R. «Слабейшее» предусловие означает, REFINEMENT r
что предикат «начального состояния», связанный с REFINES m
некоторым предикатом «заключительного состоя- SEES sm
ния», должен разрешать максимально большое чис- INCLUDES im
ло состояний. В табл. 1 рассматриваются основные SETS s
виды обобщенных подстановок и соответствующие CONSTANTS c
им слабейшие предусловия. Здесь S, T, T1, T2 озна- PROPERTIES P (s, c)
чают подстановки; x, y, t— переменные;E,F — вы- VARIABLES x
ражения; G, G1, G2, P — предикаты; P{x→ E} — INVARIANT I(x)
предикат P , в котором все свободные вхождения INITIALISATION S
переменной x заменены нa E. OPERATIONS O1; . . . ;On

END
Таблица 1 Обобщенные подстановки и их семантика

Уточнение с именем r содержит переменные в
Обобщенная подстановка S [S]P разделе VARIABLES, которые и определяют состо-
x := E P{x→ E} яние системы. Начальная инициализация пере-
skip P менных определяется подстановкой, определенной
x := E||y := F [x, y := E, F ]P в разделе INITIALISATION. Изменять состояние
S[]T [S]P ∧ [T ]P системы могут только операции, определенные в
SELECT G1 THEN T1 (G1 ⇒ [T1]P )∧ разделе OPERATIONS. Состояние системы должно
WHEN G2 THEN T2 END (G2 ⇒ [T2]P ) удовлетворять инварианту после инициализации;
PRE G THEN T END G ∧ [T ]P
ANY t WHERE G THEN T END ∀t • (G⇒ [T ]P ) операции также должны сохранять инвариант. Раз-
S ;T [S][T ]P дел SETS содержит определение множеств, раздел
IF G THEN S ELSE T END (G⇒ [S]P )∧ CONSTANTS содержит имена констант, использу-

(¬G⇒ [T ]P ) ющихся в уточнении, раздел PROPERTIES содер-
жит предикат, описывающий свойства констант.

20 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007



Конструирование канонических информационных моделей для интегрированных информационных систем

Имя конструкции, которую уточняет r, содержится Определение 1. N уточняетM , если верны следующие
в разделе REFINES. теоремы (proof obligations):

Разделы SEES и INCLUDES отвечают за компо- – Теорема непустоты объединенного состояния.
зицию уточнения с другими конструкциями. Ком- Существует объединенное состояние M и N ,
позиция SEES используется в случае, если не- удовлетворяющее инвариантамM и N :
скольким конструкциям необходимо обеспечить
возможность чтения значений переменных, мно- PM ∧ PN ⇒ ∃(v, w) • (IM ∧ IN ).
жеств и констант некоторой машины. Компо-
зиция INCLUDES используется в ситуации, ко- – Теорема уточнения инициализации. Инициализа-
гда конструкции необходимо использовать другую ция N уточняет инициализациюM :
конструкцию как свою подсистему. Переменные
включаемой конструкции становятся переменны- PM ∧ PN ⇒ [InitN ]¬[InitM ]¬IN .
ми включающей конструкции; их изменение мо-
жет производиться только при помощи операций – Теорема уточнения операций. Каждая из опе-
включаемой конструкции. Инвариант включае- раций N уточняет соответствующую опера-
мой конструкции становится частью инварианта циюM , т. е. при условии выполнения инварианта
включающей конструкции. уточнения и предусловия уточняемой операции,

выполняется предусловие уточняющей операции;
и для каждого случая исполнения Defop,N су-

2.4 Формализация понятия уточнения ществует исполнение Defop,M из соответству-
в AMN ющего начального состояния (задаваемого инва-

Рассмотрим, каким образом формализуется риантом уточнения R), которое устанавливает

факт уточнения конструкции M конструкцией N точно такие же значения выходных параметров

в AMN. Заметим, что факт уточнения может быть и сохраняет инвариант уточнения на постсосто-

установлен только в том случае, если конструкции яниях:

M и N (табл. 2) согласованы, т. е. удовлетворяют
следующим требованиям. PM ∧ PN ∧ IM ∧ IN ∧ Preop,M ⇒

– раздел REFINES конструкцииN должен содер- Preop,N ∧
[Defop,N{y → y′}]¬[Defop,M ]¬(IN ∧ y′жать имя M ; = y).

– для каждой операции конструкции M кон-
струкция N должна содержать операцию с точ- В целом, для верификации отображения инфор-
но такой же сигнатурой; мационной модели Mj в расширение Mi требуется

– инвариант конструкции N должен содержать определить AMN-семантикуMj и AMN-семантику
так называемый склеивающий инвариант (ин- расширенной Mi. После этого применяется B-тех-
вариант уточнения)R, задающий соотношение нология, чтобы доказать коммутативность отобра-
между состояниями уточняемой и уточняющей жения моделей. Это ведет к доказательству то-
конструкций. го, что Mj является уточнением расширения Mi.

Важно, что отображение информационных моде-
Таблица 2 Спецификации M и N лей, основанное на AMN и на технике уточнения,

применимо как к структурированным, объектным,
REFINEMENT M REFINEMENT N онтологическим, так и сервисным и процессным
REFINES K REFINES M моделям.
CONSTANTS cM CONSTANTS cN

PROPERTIES PM PROPERTIES PN

VARIABLES v VARIABLES w
INVARIANT IM INVARIANT IN 3 Архитектура средств
INITIALISATION InitM INITIALISATION InitN конструирования
OPERATIONS OPERATIONS

y ← op(x) = y ← op(x) = унифицирующих
PRE Preop,M PRE Preop,N

THEN THEN информационных моделей
Defop,M Defop,N

END END Целью Унификатора моделей является унифи-
. . . . . . кация множества информационных моделей (на-

END END зываемых исходными), совместно использующихся
в некоторой И-системе. Унификация исходной

ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007 21



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

модели R есть приведение ее к канонической ин- 2. Интеграция эталонных схем модели R и кано-
формационной модели C, т. е. создание такого рас- нической информационной модели.
ширения E канонической модели (которое может

3. Создание необходимого расширения E кано-
быть и пустым) и такого отображения M исходной

нической модели C.
модели в расширенную каноническую, что исход-
ная модель уточняет расширенную каноническую 4. Построение отображения модели R в расши-
модель. Уточнение моделей означает, что для лю- ренную каноническую модель.
бой допустимой спецификации r моделиR ее образ 5. Верификация уточнения модельюR расширен-
M(r) при отображении M уточняется специфика- ной канонической модели.
цией r. В результате унификации также должна
быть получена возможность доказывать уточнение Следует отметить, что этап верификации уточ-
произвольной конкретной спецификацией r мо- нения моделей является достаточно трудоемким и
дели R ее образа M(r). Верификация уточнения технически сложным и потому может применяться
моделей осуществляется на наборе образцов спе- при унификации моделей по требованию.
цификаций исходной модели. Рассмотрим более подробно указанные этапы.

Таким образом, для обеспечения деятельности 1. Формализация синтаксиса и семантики исходной
по унификации информационных моделей необхо- модели. Входными данными этого этапа являют-
димы следующие основные языки и формализмы: ся синтаксис и семантика моделиR, изложенные

– ядро канонической информационной модели; в некоторых нормативных документах (описа-
ниях соответствующих языков). Синтаксис мо-

– формализм, позволяющий описывать синтак-
делей чаще всего представляется в каком-либо

сис информационных моделей и специфици-
варианте формы Бэкуса–Наура. Семантика мо-

ровать трансляторы из одной модели в другую;
дели может быть как вербальной, представлен-

– формализм, поддерживающий верификацию ной в виде комментария к синтаксису, так и
уточнения. частично формализованной (например, с ис-

В качестве ядра канонической информацион- пользованием логики и теории множеств).
ной модели в настоящей работе рассматривается (a) Определение синтаксиса трансформируется
язык СИНТЕЗ [32], ориентированный на семан- экспертом в язык SDF, и это новое опре-
тическую интероперабельность и композиционное деление считается формальным описанием
проектирование информационных систем в широ- синтаксиса.
ком диапазоне существующих неоднородных ин-
формационных компонентов. (b) Семантика модели формализуется экспер-

Для формального описания синтаксиса и транс- том в виде определяемого на языке ASF
ляторов моделей используются языки метаком- транслятора модели в язык AMN. Такая фор-
пиляции SDF (Syntax Definition Formalism) и мализация необходима для последующей ве-
ASF (Algebraic Specification Formalism), обес- рификации уточнения моделей и может быть
печенные инструментальной поддержкой Meta- опущена, если верификация не является обя-
Environment [33]. зательной.

Для формализации семантики информацион- 2. Интеграция эталонных схем исходной и канони-
ных моделей и верификации уточнения исполь- ческой моделей.
зуется язык спецификаций AMN, основанный на
логике предикатов первого порядка и теории мно- Эталонной схемой информационной модели назы-

жеств и поддержанный технологией и инструмен- вается абстрактное описание, содержащее зна-

тальными средствами доказательства уточнения чимые связи между понятиями, соответству-

(В-технология [27]). ющими конструкциям модели. Понятия и связи,

Деятельность по унификации исходной моде- составляющие эталонную схему, могут быть

ли R, осуществляемая экспертом при поддержке аннотированы вербальными определениями.

Унификатора моделей, разбивается на следующие Целью интеграции эталонных схем является вы-
этапы (синтаксис и семантика ядра и существу- деление релевантных конструкций исходной и
ющих расширений канонической модели, а также канонической моделей. Входными данными эта-
онтологические аннотации конструкций канони- па являются SDF-синтаксис исходной модели и
ческой модели предполагаются определенными): ее вербальная семантика.

1. Формализация синтаксиса и семантики моде- (a) Автоматически выполняется построение за-
ли R. готовки эталонной схемы исходной модели

22 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007



Конструирование канонических информационных моделей для интегрированных информационных систем

на основе ее формального синтаксиса. Заго- – формальный SDF-синтаксис;
товка эталонной схемы представляет собой – AMN-семантика (т. е. вербальные правила и
совокупность наименований понятий, соот- инструментальные средства отображения в
ветствующих конструкциям модели, и связей язык AMN);
между ними.

– онтологическое описание.
(b) Заготовка эталонной схемы превращается

экспертом в собственно эталонную схему мо- Для исходной модели необходимо обеспечить:
дели. Эксперт аннотирует составляющие
эталонной схемы вербальными определени- – документы, описывающие синтаксис и се-
ями, взятыми из документов, описывающих мантику;
вербальную семантику модели. Эксперт мо- – формальный SDF-синтаксис;
жет уточнить автоматически порожденную
заготовку, добавив или удалив новые эле- – AMN-семантику;
менты или связи между ними. – эталонную схему модели;

(c) На основе вербальных определений автома- – установленные автоматически или с по-
тически порождаются векторы дескрипторов мощью эксперта и подтвержденные экспер-
элементов эталонной схемы, с использова- том соответствия элементов исходной и ка-
нием векторной модели производится поиск нонической моделей;
элементов эталонной схемы канонической
модели, близких к элементам эталонной схе- – неформальное определение отображения тех

мы исходной модели (эталонная схема кано- конструкций исходной модели в конструк-

нической модели при этом предполагается ции канонической, для которых установлено

построенной). Эксперт подтверждает либо соответствие.

отвергает найденные соответствия, а также Для создания расширения эксперту могут пона-
добавляет соответствия, не найденные авто- добиться все вышеперечисленные данные:
матически. Результатом интеграции явля-
ется список соответствий конструкций ис- (a) Создание расширения эксперт начинает с
ходной и канонической моделей. Одной определения названия расширения и расши-
конструкции канонической модели может ряемой версии канонической модели (т. е.
соответствовать несколько конструкций ис- выбирает расширяемую версию из списка).
ходной модели (и наоборот). (b) Дальнейшая деятельность эксперта заключа-

3. Создание расширения канонической модели. К не- ется в итеративном редактировании синтак-
обходимости создания расширения эксперт при- сиса расширения и вербальной семантики
ходит в процессе интеграции эталонных схем (включая правила отображения AMN). При
исходной и канонической моделей: обнаружи- этом эксперт обращается к описаниям ис-
вается, что средств ядра (или ядра с уже постро- ходной и канонической моделей, к интер-
енными расширениями) канонической модели фейсу интеграции эталонных схем моделей.
недостаточно для выражения некоторых кон- Одновременно эксперт осуществляет допол-
струкций исходной модели. К этому выводу нение вербального описания отображения
эксперт приходит, если: исходной модели в каноническую для не-

достающих конструкций.
– между конструкциями исходной модели и

конструкциями канонической модели алго- (c) После того как вербальное отображение ис-
ритмы интеграции не установили связей; ходной модели в каноническую полностью

определено и зафиксированы абстрактный
– на основе анализа документов, описыва- синтаксис расширения и вербальная семан-

ющих синтаксис и семантику исходной и тика, для расширения создается эталонная
канонической модели сделано экспертное схема (этапы 2a, 2b).
заключение о невыразимости конструкций
исходной модели в канонической. (d) Далее уточняется картина интеграции эта-

лонных схем исходной модели и расширен-
При создании расширения для канонической ной канонической модели: устанавливаются
модели предполагаются определенными: и фиксируются соответствия между кон-
– документы, описывающие синтаксис и се- струкциями исходной модели и конструк-

мантику; циями расширения.

ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007 23



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

4. Построение отображения исходной модели в рас- (c) C использованием полученного на этапе 4c
ширенную каноническую модель. Входными дан- транслятора исходной модели в канониче-
ными этапа являются список соответствий кон- скую автоматически порождаются канони-
струкций исходной и канонической моделей, ческие спецификации CSi образцов.
SDF-синтаксис и вербальная семантика исход- (d) C использованием транслятора канониче-
ной и канонической моделей. ской модели в AMN [18], автоматически по-

рождаются канонические AMN-специфика-
(a) Эксперт разрабатывает неформальные пра-

вила отображения исходной модели в рас- ции CSAMNi образцов.

ширенную каноническую. (e) Экспертом с использованием средств В-тех-
нологии автоматически и/или интерактив-

(b) Автоматически генерируется заготовка ASF- но доказывается уточнение спецификаци-
транслятора исходной модели в расширен- ями SAMNi спецификаций CSAMNi . Текст
ную каноническую. Заготовка строится на доказательств фиксируется.
основе информации, содержащейся в списке
соответствий элементов исходной и канони- Рассмотрим архитектуру Унификатора моделей
ческой моделей и SDF-синтаксисах моделей. (рис. 1) и то, каким образом компоненты архитек-

туры поддерживают различные этапы деятельности
(c) Эксперт формализует вербальные правила эксперта по унификации моделей. На рисунке

отображения, превращая автоматически по- пунктирные стрелки обозначают доступ из одно-
рожденную заготовку транслятора в полно- го компонента к интерфейсу другого компонента.
ценный ASF-транслятор исходной модели в Унификатор состоит из следующих крупных
каноническую. компонентов (групп компонентов):

5. Верификация уточнения исходной моделью рас- – Meta-Environment (для определения и проверки
ширенной канонической модели. Верификация корректности синтаксиса моделей и транслято-
уточнения осуществляется на наборе образцов ров моделей);
спецификаций исходной модели. Желательно, – B-Toolkit (поддерживающий язык AMN и сред-
чтобы образец являлся достаточно характерной ства доказательства уточнения спецификаций);
спецификацией исходной модели (типовой кон- – репозиторий метаинформации;
струкцией). Примерами могут служить образцы

– менеджер моделей.
потоков работ (workflow patterns) [34], использо-
ванные для синтеза канонической процессной Meta-Environment и B-Toolkit представляют со-
модели [15]. В случае, когда для модели за- бой самостоятельные продукты. Meta-Environment
труднительно выделить образцы, верификация поддерживает следующие этапы унификации мо-
может быть проведена для используемых при делей: формализация синтаксиса и семантики ис-
конструировании И-системы конкретных схем в ходной модели (этап 1), формализация синтакси-
исходной модели. са расширения канонической модели (этап 3b),

Идея верификации уточнения образцом формализация вербальных правил отображения
S

исходной модели в каноническую и построение
исходной модели его образа CS при отображе-

транслятора моделей на основе автоматически сге-
нии в каноническую модель состоит в следу-
ющем: образец S и его образ CS отобража- нерированной заготовки (этап 4c), проверка образ-

цов исходной модели на соответствие формально-
ются в язык AMN, и уточнение доказывается

му синтаксису (этап 5a). B-Toolkit поддерживает
средствами В-технологии для соответствующих
AMN-спецификаций. Уточнение AMN-специ- этап 5e автоматического и интерактивного доказа-

тельства уточнения спецификаций.
фикаций будет свидетельствовать об уточнении
образцом Репозиторий метаинформации представляет со-

S его образа CS.
бой объектно-реляционную базу данных и предна-

(a) Экспертом выделяются образцы исходной значен для реализации реестра моделей и хранения
модели, строятся их спецификацииSi и про- спецификаций. Реестр моделей (или просто ре-
веряются на соответствие формальному син- естр) содержит регистрационные карты моделей,
таксису. расширений канонической модели, образцов. В ре-

гистрационных картах сохраняется вся информа-
(b) C использованием транслятора исходной мо- ция, порождаемая в ходе унификации моделей

дели в AMN, полученного на этапе 1b, авто- (в том числе и информация, порождаемая в ходе
матически порождаются AMN-специфика- взаимодействия эксперта с компонентами Meta-
ции SAMNi образцов. Environment и B-Toolkit).

24 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007



Конструирование канонических информационных моделей для интегрированных информационных систем

Рис. 1 Архитектура Унификатора моделей

В качестве примера приведем список данных, • дата документа;
составляющих регистрационную карту информа- • ссылка на документ (URL);
ционной модели:

• вербальные правила отображения модели в
– название модели (краткое, полное); AMN (текстовый файл);
– синтаксис модели: • спецификация ASF-транслятора модели в
• название документа, описывающего син- AMN;

таксис (стандарт, заявка и т. д.);
– спецификация заготовки эталонной схемы мо-

• дата документа; дели;
• ссылка на документ (URI); – спецификация эталонной схемы модели;
• формальный SDF-синтаксис модели;

– список регистрационных карт примеров мо-
– семантика модели: дели;

• название документа, описывающего семан- – ссылка на расширение канонической модели, с
тику; которым интегрируется модель;

ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007 25



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

– соответствие элементов исходной и канониче- Компонент SynthesisLoader обеспечивает поме-
ской моделей; щение эталонных схем моделей (этапы 2b, 3c) и

– вербальные правила отображения модели в ка- спецификаций образцов моделей в репозиторий
ноническую; метаинформации (этап 5c).

– спецификация ASF-транслятора модели в ка- Компонент TranslatorTemplateConstructor обеспе-
ноническую. чивает автоматическую генерацию заготовки ASF-

транслятора исходной модели в каноническую
Все остальные компоненты Унификатора объ- (этап 4b).

единены в группу, называемую менеджер моделей.
Компонент Synthesis2B обеспечивает автомати-

Компонент ModelManager предоставляет графи-
ческое отображение спецификаций канонической

ческий интерфейс, позволяющий эксперту под-
модели в язык AMN (этап 5d).

ключиться к конкретному репозиторию метаин-
формации, а также вызвать компоненты, которые
обеспечивают:

– поиск информационной модели в реестре; 4 Пример отображения исходной
– регистрацию новой модели в реестре; информационной модели
– просмотр расширений, зарегистрированных в в каноническую

реестре;
– регистрацию нового расширения канониче- В этом разделе рассматривается пример отобра-

ской модели в реестре. жения в каноническую модель фрагмента модели
Компонент ModelExplorer предоставляет графи- OWL (Web Ontology Language, [35]) — языка семан-

ческий интерфейс, позволяющий производить по- тической разметки для публикации и совместного
иск модели в реестре по полному или краткому использования онтологий в Веб.
названию модели, названиям или ссылкам на до-
кументы, описывающие синтаксис или семантику
модели. 4.1 Формализация синтаксиса OWL

Компонент ExtensionExplorer предоставляет гра-
фический интерфейс, позволяющий просматри- Синтаксис и семантика OWL описаны в доку-
вать названия и вербальные описания зарегистри- менте [36]. Заметим, что в этом документе описан
рованных расширений канонической модели. не XML-синтаксис, а абстрактный синтаксис, неза-

Компонент ModelRegistrar предоставляет графи- висимый от XML представления.
ческий интерфейс, позволяющий просматривать и Синтаксис представлен в версии расширенной
редактировать регистрационные карты моделей и формы Бэкуса–Наура, правила которой имеют сле-
их образцов, содержащихся в реестре. дующий вид:

Компонент ExtensionRegistrar предоставляет гра-
фический интерфейс, позволяющий просматри- axiom ::= ... |
вать и редактировать регистрационные карты рас- ’ObjectProperty(’ propertyID
ширений канонической модели, содержащихся в [’Deprecated’] { annotation }

реестре. {’super(’ propertyID ’)’}

Компонент SDF2RS (SDF to Reference Schema) [’inverseOf(’ propertyID ’)’]
[’Symmetric’]

обеспечивает автоматическое построение заготов-
[ ’Functional’ | ’InverseFunctional’ |

ки эталонной схемы исходной модели (этап 2a) или ’Functional’ ’InverseFunctional’ |
расширения (этап 3c) на основе их формального ’Transitive’ ]
синтаксиса. { ’domain(’ classID ’)’ }

Компонент RSEditor (Reference Schema Editor) { ’range(’ classID ’)’ } ’)’
предоставляет графический интерфейс, позволя-
ющий превратить заготовку эталонной схемы моде- Здесь символ ::= разделяет голову и тело правила,
ли (этап 2b) или расширения (этап 3c) в собственно вертикальная черта (|) означает альтернативу, опци-
эталонную схему. ональные части правила заключаются в квадратные

Компонент RSIntegrator (Reference Schema Inte- скобки [ ], повторяющиеся части заключаются в
grator) обеспечивает поддержку интеграции эталон- фигурные скобки { }.
ных схем исходной модели и канонической модели Первым этапом унификации модели является
(этап 2c) или расширения канонической модели преобразование исходного синтаксиса в формаль-
(этап 3d). ный SDF-синтаксис:

26 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007



Конструирование канонических информационных моделей для интегрированных информационных систем

module unifier/owl/OWL-Syntax intersectionOf(DessertWine
restriction(hasColor value(White))))

sorts
Axiom ObjectPropertyAxiom ... ObjectProperty(hasColor

domain(Wine) range(WineColor))
context-free syntax ObjectProperty(hasFlavor
ObjectPropertyAxiom -> Axiom domain(Wine) range(WineFlavor))

ObjectProperty(hasSugar
"ObjectProperty" "(" PropertyID domain(Wine) range(WineSugar))
("Deprecated")? Annotation*
SuperProperty* InverseOf? EnumeratedClass(WineColor White Rose Red)
("Symmetric")? PropertyKind? EnumeratedClass(WineFlavor
ObjectPropertyDomain* Delicate Moderate Strong)
ObjectPropertyRange* ")" EnumeratedClass(WineSugar
-> ObjectPropertyAxiom Sweet OffDry Dry)

Как можно видеть, формальный синтаксис OWL Основной класс онтологии — Wine, подкласса-
образует SDF-модуль OWL-Syntax, включающий ми его являются IceWine и DessertWine. Вино ха-

раздел сортов (куда попадают все нетерминальные рактеризуется цветом (свойство hasColor), вкусом
символы синтаксиса) и раздел контекстно-свобод- (hasFlavor) и содержанием сахара hasSugar.

ного синтаксиса (включающий правила). Раздели- IceWine — это белое десертное вино с сильным или

телем в правилах SDF является символ ->, голова средним вкусом.
правила располагается справа от разделителя, те- Образом при отображении данной онтологии в
ло — слева. Опциональные части правил помеча- AMN является конструкция Wines:
ются знаком вопроса ?, повторяющиеся части —
знаком *. REFINEMENT Wines

При формализации в синтаксисе могут по- SETS Ind;
явиться новые нетерминальные символы, детали- WineColor = {White,Rose,Red};
зирующие синтаксис и помогающие избавиться WineF lavor = {Delicate,Moderate, Strong};
от недетерминизма при программной обработке. WineSugar = {Sweet,OffDry,Dry}
Так, аксиома объектного свойства (ObjectProperty) VARIABLES
в SDF-синтаксисе OWL была выделена в отдель- Wine, IceWine,DessertWine,
ный сорт, и для нее было образовано отдельное hasColor, hasF lavor, hasSugar
правило. INVARIANT

Wine ∈ POW (Ind) ∧ IceWine ∈ POW (Ind) ∧
DessertWine ∈ POW (Ind) ∧

4.2 Формализация семантики OWL DessertWine ⊆Wine ∧
в языке AMN hasColor ∈Wine↔WineColor ∧

∀wine.(wine ∈Wine⇒
Формализация семантики заключается в по- card (hasColor[{wine}]) = 1) ∧

строении ASF-транслятора, отображающего спе- hasF lavor ∈Wine↔WineF lavor ∧
цификации OWL в спецификации AMN. В данном ∀wine.(wine ∈Wine⇒
разделе будут кратко проиллюстрированы принци- card (hasF lavor[{wine}]) = 1) ∧
пы отображения OWL в AMN на примере онтологии hasSugar ∈Wine↔WineSugar ∧
вин: ∀wine.(wine ∈Wine⇒

card (hasSugar[{wine}]) = 1) ∧
Class(Wine ran (IceWine ⊳ hasF lavor) =
restriction(hasColor cardinality(1)) {Strong,Moderate} ∧
restriction(hasFlavor cardinality(1)) ran (DessertWine ⊳ hasSugar) =
restriction(hasSugar cardinality(1))) {OffDry, Sweet} ∧

Class(IceWine
IceWine = DessertWine ∩

restriction(hasFlavor
allValuesFrom(oneOf(Strong Moderate)))) {x|x ∈ dom (hasColor) ∧ hasColor(x) =White}

Class(DessertWine Wine OPERATIONS
restriction(hasSugar include Wine(ind) = . . .
allValuesFrom(oneOf(OffDry Sweet)))) include IceWine(ind) = . . .

EquivalentClasses(IceWine include DessertWine(ind) = . . .

ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007 27



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

Рис. 2 Интеграция эталонных схем OWL и канонической модели

set hasColor(ind, val) = . . . ного объекта. В примере рассмотрено тело лишь
set hasSugar(ind, val) = . . . одной операции, соответствующей свойству has-
set hasF lavor(ind, val) = Flavor. Операция изменяет значение свойства has-
PRE Flavor у индивидуализированного объекта ind на
ind ∈Wine ∧ val ∈WineF lavor ∧ значение val, но только в том случае, когда вы-
ind ∈ IceWine⇒ val ∈ {Strong,Moderate} полняется предусловие операции, гарантирующее

THEN выполнение инварианта после выполнения опе-
hasF lavor(ind) := val рации.

END

4.3 Интеграция эталонных схем OWL
Множество всех индивидуализированных

объектов (individuals) онтологии представляется и канонической модели
в AMN множеством Ind, перечислимые классы В данном разделе на небольших примерах будет
(например, WineColor) представляются отдель- продемонстрирована интеграция эталонных схем
ными множествами. Классы (например, Wine) модели OWL и канонической модели (рис. 2), по-
представляются одноименными переменными, ти- строенных на основе формального SDF-синтаксиса
пизированными в инварианте как подмножества моделей.
Ind. На левой стороне рисунка в виде UML-диа-

Объектные свойства (например, hasColor) пред- граммы изображены типы, атрибуты и связи эта-
ставляются одноименными переменными, типи- лонной схемы модели OWL. Представлены связи
зированными в инварианте как отношения между двух видов: отношение обобщения — специализа-
множествами, представляющими области опреде- ции (например, тип Restriction является подтипом
ления и области значения свойств. Различные Description) и ассоциации различных кардинально-
ограничения на классы и свойства (ограничения стей (например, с аксиомой класса ClassAxiom могут
значений и кардинальности свойств, аксиомы быть связаны описания — Description).
эквивалентности классов и т. д.) представляются На правой стороне рисунка изображены типы
соответствующими частями инварианта. Каждо- эталонной схемы канонической модели.
му классу также ставится в соответствие операция, В эталонных схемах типы, атрибуты и связи он-
пополняющая класс новым элементом, а каждо- тологически аннотируются экспертом на основа-
му свойству — операция, изменяющая значение нии описаний моделей. Аннотации используются
этого свойства у некоторого индивидуализирован- при установлении соответствий между конструк-

28 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007



Конструирование канонических информационных моделей для интегрированных информационных систем

циями исходной и канонической моделей, проис- Транзитивность ассоциаций выражается инва-
ходящем автоматизированным образом с участием риантом transitivity и состоит в следующем: если
эксперта. a состоит в ассоциации с b и b состоит в ассо-

Полный список соответствий конструкций циации с c, то a состоит в ассоциации с c (a, b,
OWL и канонической модели (использующийся для c — значения некоторого типа данных). Так же
построения транслятора OWL в каноническую мо- выражается и вербальная семантика транзитивной
дель) для рассмотренных на рис. 2 подмножеств ассоциации.
моделей приведен в табл. 3. На рисунке соответ- Семантику транзитивной ассоциации в AMN
ствия обозначены пунктирными стрелками. рассмотрим на следующем примере. Пусть тип Re-

gion содержит атрибут subRegionOf, принадлежащий
Таблица 3 Соответствия конструкций OWL и канониче- метатипу ассоциаций SubRegionOf (который явля-
ской модели ется подтипом метатипа транзитивных ассоциаций

Transitive):
Конструкция

Конструкция OWL
канонической модели { Region; in: type;

OwlID Synthesis-Id subRegionOf: {set;

ClassAxiom Abstract-Type type_of_element: Region;};

ClassAxiom.name Abstract-Type.name }

ClassAxiom.descriptions Abstract-Type.attributes { SubRegionOf; in: association, metatype;
superclass: Transitive;

Description Attribute-Specification
instance_section: {

Restriction Attribute-Specification
domain: Region;

Restriction.onProperty Attribute-Specification.name
range: Region;

}}

4.4 Создание расширения канонической Транзитивность ассоциации означает, что если
модели регионA является подрегиономB и регионB явля-

ется подрегионом C, тоA является подрегионом C.
В процессе интеграции эталонных схем OWL и При отображении в AMN данная семантика будет

канонической модели было обнаружено, что атри- выражаться следующим инвариантом:
буту kind типа ObjectPropertyAxiom, определяющему
вид объектного свойства (транзитивное, функцио- ∀a, b, c (a ∈ ext Region ∧ b ∈ ext Region ∧
нальное и т. д.), а также понятию ObjectPropertyKind c ∈ ext Region ∧ a ∈ subRegionOf(b)∧
не соответствуют никакие конструкции канониче- b ∈ subRegionOf(c)⇒ a ∈ subRegionOf(c))
ской модели.

В канонической модели понятию объектного Здесь subRegionOf — переменная, представляющая в
свойства (ObjectPropertyAxiom) соответствует поня- AMN соответствующий атрибут, ext Region — мно-
тие метакласса ассоциаций (Association-Metaclass). жество, представляющее все допустимые экземпля-
Было принято решение о расширении канониче- ры типа Region.
ской модели новыми метатипами ассоциаций — Подобным же образом осуществляется расши-
Transitive, Functional и т. д. В качестве примера рас- рение семантики канонической модели для других
смотрим спецификацию метатипа Transitive: видов ассоциаций.
{ Transitive; Список соответствий конструкций OWL и ка-

in: association, metatype; нонической модели расширяется следующим соот-
instance_section: { ветствием:

domain: type;
range: type; Конструкция
transitivity: { Конструкция OWL

канонической модели
in: predicate, invariant; ObjectPropertyAxiom.kind Association-Metaclass.superclass
{{ all a/this.domain.inst,

b/this.domain.inst,
Это соответствие означает, что вид объектного

c/this.domain.inst(
b/this.range.inst & свойства OWL выражается в канонической модели
in([a,b], this) & отношением суперкласса между метатипом ассоци-
in([b,c], this) -> аций, выражающим объектное свойство (в приме-

in([a,c], this)) }} ре — SubRegionOf), и некоторым встроенным мета-
} } } типом ассоциаций (в примере — Transitive).

ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007 29



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

4.5 Построение отображения OWL директив в список классов и порождена из со-
в расширенную каноническую ответствия связей Ontology.directives и Module-

модель Def.class specification.
– список заготовок правил трансляции:

Структура ASF-транслятора моделей в общем
случае выглядит следующим образом: [Module-Def]
module <имя модуля> Synthesis-Id := t-Module-Name(OwlID),
<список импортируемых модулей> Type-Specification* :=
hiddens t-Type-Specification-List(Directive*),

variables Class-Declarator* :=
<список переменных> t-Class-Declarator-List(Directive*)

exports ====>

context-free syntax t-Module-Def(Ontology(OwlID Directive*))

<список сигнатур функций трансляции> =
{ Synthesis-Id; in: module;

equations
type: Type-Specification*;

<список правил трансляции> class_specification:
Автоматически генерируются следующие эле- Class-Declarator*;

менты транслятора (тем самым образуя заготовку, }
подлежащую доработке экспертом):

– имя транслятора —unifier/owl2synthesis Приведенное правило описывает действие
/owl-translator; функции t-Module-Def и порождено на основе

– список импортируемых (используемых) моду- анализа элемента t-Module-Def, его атрибутов и
лей: ассоциаций (имя модуля соответствует имени
imports unifier/owl/OWL-Syntax онтологии OWL, секции типов и секции клас-
imports unifier/synthesis/ сов модуля соответствуют директивы). В пра-

Synthesis-Syntax виле использованы рекурсивные вызовы функ-
ций преобразования списка директив в списки

– список переменных: типов и классов.
"ObjectPropertyAxiom"[0-9\’]* -> Списки импортируемых модулей, переменных,

ObjectPropertyAxiom сигнатур функций трансляции, правил трансляции
"Attribute-Specification"[0-9\’]* -> дорабатываются (расширяются, изменяются) экс-

Attribute-Specification
пертом. По ASF-описанию транслятора при помо-

"Attribute-Specification*"[0-9\’]* ->
Attribute-Specification щи средств среды Meta-Environment автоматиче-

*
ски генерируется программный код транслятора на

Данные определения означают, что в правилах языке С. На этапе верификации уточнения моде-
трансляции могут использоваться перемен- лей 5c код транслятора автоматически компилиру-
ные соответствующих сортов (например, пе- ется, и полученный С-транслятор используется для
ременная Attribute-Specification2 сорта Attribute- порождения канонических спецификаций образ-
Specification). цов исходной модели. Вообще, одной из основных

– список сигнатур функций трансляции: целей создания транслятора является его использо-
вание для конструирования И-систем: транслятор

t-Module-Def(Ontology) -> Module-Def применяется для отображения схемы источника,
t-Type-Specification-List(Directive*) описанной в исходной модели, в каноническую
-> {Type-Specification ","}* модель.
t-Class-Declarator-List(Directive*)
-> {Class-Declarator ","}*

4.6 Верификация уточнения моделью
В данном примере функция t-Module-Def преоб- OWL расширенной канонической
разует онтологию OWL в модуль канонической
модели и порождена из соответствия элемен- модели
тов Ontology и Module-Def, функция t-Type- В данном подразделе рассматривается верифи-
Specification-List преобразует список директив в кация отображения OWL в каноническую модель
список типов и порождена из соответствия свя- на примере схемы OWL, а именно — онтологии
зей Ontology.directives и Module-Def.type, функ- вин, рассмотренной в подразделе 4.2. Для дан-
ция t-Class-Declarator-List преобразует список ной онтологии уже рассмотрены спецификация на

30 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007



Конструирование канонических информационных моделей для интегрированных информационных систем

OWL и семантика в AMN. Осталось рассмотреть supertype: DessertWine;
отображение онтологии в каноническую модель, equivalentClasses: {
отображение канонической спецификации в AMN in: predicate, invariant;
и верификацию уточнения AMN-спецификаций. {{ iceWine = intersect(dessertWine,

Каноническая спецификация, полученная при- { w | in(w, wine) &
w.hasFlavor = White })

менением транслятора OWL в каноническую мо- }}
дель (рассмотренного в предыдущем подразделе) к };
винной онтологии, выглядит следующим образом: };

}; }
{ Wines; in: module, ontology;
type: Перечислимые классы OWL (например, Wine-
{ Wine; in: type, owl; Color) представляются в канонической модели од-

hasColor: WineColor; ноименными перечислимыми типами. Классы
metaslot (например, Wine) представляются одноименными
in: HasColor; типами (Wine) и классами (wine) канонической
min_card: 1; модели. Объектные свойства (например, hasCol-
max_card: 1

or) представляются атрибутами типов и метати-
end

пами ассоциаций (HasColor). Ограничения значе-
...

}, ний свойств представляются инвариантами типов
{ DessertWine; in: type, owl; (например, DessertWine.restriction hasSugar). Огра-

supertype: Wine; ничения, выражаемые отдельными аксиомами (на-
restriction_hasSugar: { пример, аксиомы эквивалентности классов), пред-

in: predicate, invariant; ставляются инвариантами классов канонической
{{ all w/DessertWine ( модели (например, iceWine.equivalentClasses).

in(w.hasSugar, Образом при отображении данной онтологии в
{OffDry, Sweet})) }} AMN является конструкция Wines:

};
},

REFINEMENT Wines
{ IceWine; in: type, owl;

restriction_hasFlavor: { SETS AV AL,
in: predicate, invariant; WineColor = {White,Rose,Red},
{{ all w/IceWine ( WineF lavor = {Delicate,Moderate, Strong},

in(w.hasFlavor, WineSugar = {Sweet,OffDry,Dry}
{Strong, Moderate})) }} CONSTANTS

}; Obj, ext Wine, ext DessertWine, ext IceWine
}, PROPERTIES
{ HasColor; Obj ∈ POW (AV AL) ∧

in: association, metatype, owl; ext Wine ∈ POW (Obj) ∧
instance_section: { ext DessertWine ∈ POW (Obj) ∧

domain: Wine;
ext IceWine ∈ POW (Obj) ∧

range: WineColor;
} }, ext DessertWine ⊆ ext Wine
... ∧ ext IceWine ⊆ ext DessertWine
{ WineColor; VARIABLES

{ enum; enum_list: {White, Rose, Red} } wine, iceWine, dessertWine,
}, hasColor, hasF lavor, hasSugar
... INVARIANT

class_specification: wine ∈ POW (ext Wine) ∧
{ wine; in: class, owl; iceWine ∈ POW (ext IceWine) ∧

instance_section: Wine; dessertWine ∈ POW (ext DessertWine) ∧
}, dessertWine ⊆ wine ∧
{ dessertWine; in: class, owl;

hasColor ∈ ext Wine→WineColor ∧
superclass: wine;
instance_section: Wine; hasF lavor ∈ ext Wine→WineF lavor ∧

}, hasSugar ∈ ext Wine→WineSugar ∧
{ iceWine; in: class, owl; ∀w(w ∈ ext IceWine⇒

instance_section: { hasF lavor(w) ∈ {Strong,Moderate}) ∧
in: type, owl; ∀w(w ∈ ext DessertWine⇒

ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007 31



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

Таблица 4 Число теорем

Число Число автоматически
Теоремы

теорем доказанных теорем
Теорема непустоты объединенного состояния 1 0
Теоремы уточнения операции include Wine 17 5
Теоремы уточнения операции include DessertWine 20 5
Теоремы уточнения операции include IceWine 21 5
Теоремы уточнения операции set hasColor 11 1
Теоремы уточнения операции set hasSugar 11 1
Теоремы уточнения операции set hasF lavor 11 1
Общее число теорем 92 18

hasSugar(w) ∈ {OffDry, Sweet}) ∧ аксиомы эквивалентности классов и т. д.) представ-
iceWine = dessertWine ∩ ляются соответствующими частями инварианта.
{w|w ∈ wine ∧ hasColor(w) =White} Каждому классу также ставится в соответствие

OPERATIONS операция, пополняющая класс новым элементом, а
include Wine(obj) = . . . каждому атрибуту — операция, изменяющая значе-
include IceWine(obj) = . . . ние этого свойства у некоторого объекта. В примере
include DessertWine(obj) = . . . рассмотрено тело лишь одной операции, соответ-
set hasColor(obj, val) = . . . ствующей атрибуту hasFlavor. Операция изменяет
set hasSugar(obj, val) = . . . значение свойства hasFlavor у объекта obj на значе-
set hasF lavor(obj, val) = ние val, но только в том случае, когда выполняется
PRE предусловие операции, гарантирующее выполне-
obj ∈ wine ∧ val ∈WineF lavor ∧ ние инварианта после выполнения операции.
obj ∈ iceWine⇒ val ∈ {Strong,Moderate} Спецификации AMN, отвечающие онтологии

THEN вин OWL и ее образу при отображении в кано-
hasF lavor(obj) := val ническую модель, были введены в инструменталь-

END ное средство автоматизации доказательства уточ-
нения AMN (B-Toolkit 5.1.4). Далее автоматически

Множество всех значений абстрактных типов были сформулированы 92 теоремы, в совокупно-
данных представляется в AMN множеством AVAL, сти утверждающие факт уточнения спецификаций.
множество всех значений объектных типов дан- Большое количество теорем объясняется тем, что
ных — его подмножеством Obj. Перечислимые сложные теоремы автоматически подразделяются
типы (например, WineColor) представляются от- инструментальным средством на более простые,
дельными множествами. Типы представляются которые можно доказывать независимо. Напри-
множествами всех своих допустимых значений — мер, теорема уточнения операции set hasFlavor была
экстенсионалами (например, тип Wine представ- разделена на 11 теорем. С использованием авто-
ляется экстенсионалом ext Wine). Экстенсио- матических средств доказательства было доказано
налы объектных типов типизируются в секции 18 теорем, остальные были доказаны интерактив-
PROPERTIES как подмножества Obj. Отношение но. В табл. 4 указано общее число теорем и число
тип–подтип представляется отношением множест- автоматически доказанных теорем.
во–подмножество на экстенсионалах.

Классы (например, wine) представляются одно-
именными переменными, типизированными в ин- 5 Состояние проблемы
варианте как подмножества экстенсионалов типов
своих экземпляров. Отношение класс–подкласс Представляемая работа является новой, она не
представляется отношением множество–подмно- имеет аналогов в мировой практике. Наиболее
жество на соответствующих переменных. близкие исследования активно ведутся в последние

Атрибуты типов (например, hasColor) представ- десять лет Microsoft Research и рядом университетов
ляются одноименными переменными, типизиро- Европы и США с целью создания унифицирован-
ванными в инварианте как функции, определенные ных средств манипулирования метаданными, глав-
на экстенсионале типа. ным образом в базах данных (спецификации интер-

Различные ограничения на классы и свойства фейсов лишь упоминаются). Эти средства сводятся
(ограничения значений и кардинальности свойств, к отображению схемы баз данных из одной модели

32 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007



Конструирование канонических информационных моделей для интегрированных информационных систем

данных в соответствующую схему базы данных в При этом шаги 1 и 3 объявляются трудоемки-
другой модели данных [37]. Такие преобразования ми и прямолинейными, поскольку каждая мо-
необходимы при решении ряда практических за- дель данных (исходная или целевая) поглощается
дач, включая обмен данными, интеграцию данных, (is subsumed) супермоделью. Единственная транс-
формирование хранилищ данных, семантическую формация, согласно [38], кодированная авторами,
обработку запросов к базам данных. соответствует шагу 2.

Основным оператором отображения схем явля- Инструментарий включает набор элементарных
ется ModelGen [38], параметрами которого служат правил над метаконструкциями, выраженных на
исходная модель данных M1, целевая модель дан- языке LDL (например, элиминация n-арных свя-
ных M2, исходная схема базы данных S1, выра- зей, элиминация атрибутов связей, элиминация
женная в M1. Результатом ModelGen является це- связей «многие ко многим», замена связей ссыл-
левая схема S2, выраженная в M2. Существенно, ками, элиминация обобщений). Элиминация не-
что ModelGen должен быть универсальным опера- которой конструкции включает замену ее другой
тором, применимым к любым моделям данных в конструкцией. Композиция таких правил позво-
рассматриваемой среде. ляет определять сложные трансформации. Уни-

Основная идея подхода ModelGen заключается в фицированные правила предполагают их специ-
использовании метамодели — набора конструкций, ализацию в конкретной ситуации добавлением
используемых для определения моделей данных, условий, определяющих, к каким концептам пра-
являющихся экземплярами метамодели. Средством вила являются применимыми. Инструментарий
определения конструкций этого набора являются позволяет верифицировать, принадлежат ли гене-
унифицированные, не зависящие от моделей дан- рируемые схемы целевой модели, а также обна-
ных метаконструкции, классифицированные в [39] руживать избыточность в последовательности эле-
Халлом и Кингом в ряд категорий: ментарных преобразований.

В дальнейшем планируется введение макроопе-
– лексем (наборов атомарных значений);

раторов [41–43] для шага 2:
– абстрактов (сущностей, типов и т. д.);

– Match — возвращает отображение одной схемы
– агрегатов (конструкций, основанных на под- в другую;

множестве декартова произведения — таблиц,
– Merge — для двух схем и отображения одной

связей и пр.);
из них в другую возвращает интегрированную

– функций (атрибутов, свойств); схему;

– иерархий и пр. – Diff — для схемы и заданного для нее отображе-

Каждая модель определяется подмножеством ния возвращает остаток схемы, не входящий в

таких конструкций и соответствующих им мета- отображение;

конструкций. Отображение схемы из одной модели – Compose — возвращает композицию двух отоб-
данных в другую определяется в терминах транс- ражений схем.
формации метаконструкций. Супермоделью назы- Инструментарий поддерживает пользователей
вается модель данных, содержащая конструкции, трех категорий:
соответствующие всем метаконструкциям, извест-
ным системе. В системе [40] используется око- (1) проектировщиков схем в заданных моделях, ис-
ло дюжины таких конструкций. Каждая модель пользующих ModelGen для отображения полу-
данных является специализацией супермодели, так ченных схем;
что схема в любой модели данных является схе- (2) инженеров моделей, определяющих новые мо-
мой в супермодели. Отображение схем выполня- дели, применяя имеющиеся метаконструкции;
ется как процесс элементарных шагов элиминации

(3) инженеров метамодели, добавляющих новые
конструкций, отсутствующих в целевой модели, и,

метаконструкции к метамодели и определя-
возможно, введения новых конструкций.

ющих правила преобразования для них (тем
Процесс отображения включает следующие

самым расширяется набор моделей, поддержи-
шаги:

ваемых системой).
1. Трансляцию исходной схемы в супермодель.

Подход ModelGen использует четырехуровневый
2. Трансляцию результата в целевую схему, выпол- реляционный словарь [44]:

няемую в рамках супермодели. – уровень метасупермодели, определяющий
3. Трансляцию целевой схемы в целевую модель. структуру метаконструкций;

ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007 33



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

– уровень супермодели, на котором хранятся схе- бы попытаться определить точный смысл свойств
мы, подлежащие трансляции; отображений схем и моделей (таких как соответ-

– уровень моделей данных, на котором определя- ствие, специализация, поглощение). Однако со-

ются конструкции всех моделей данных среды, вершенно не ясно, каким образом можно было бы

причем каждая конструкция связана с соответ- доказывать выполнимость этих свойств. Более то-

ствующей ей метаконструкцией; го, авторы признают ограниченность предлагаемых
формализмов: «Mы не рассматриваем проблемы

– уровень схем, на котором расположены все схе- отображения одной модели данных (например, ре-
мы системы. ляционной) в другую модель (например, объектно-

Основные операции над словарем заключаются ориентированную). Представленный формализм
в определении новых моделей данных, основан- применим к должным образом упрощенной XML
ных на имеющихся конструкциях, и схем для уже Schema».
определенной модели. После определения моде- Авторы отмечают, что хотя алгебраическая и
ли данных инструментарий автоматически создает теоретико-модельная семантика средств отображе-
структуры, необходимые для работы со схемами. ния схем и рассматривалась в [46, 47], она остается

Развитием инструментария ModelGen является во многом не исследованной областью.
инструментарий MIDST [40], который дополни- Интересны в этой связи рассуждения в рабо-
тельно к отображению схем позволяет реализовать те [37]. Необходимо обеспечить, чтобы для каждого
трансформацию на уровне данных (если задана ба- экземпляра исходной схемы существовал экзем-
за данныхD1 в схеме S1, генерируется соответству- пляр целевой схемы, из которого можно было
ющая база данных D2 в схеме S2). бы реконструировать экземпляр исходной схемы.

Отдельно, без связи с инструментарием Model- Доминирование [47] соответствует отображению
Gen или MIDST, рассматривается вопрос транс- экземпляров исходной схемы в целевую, которое
ляции схем, который можно отнести к шагам 1 должно быть тотальной инъектирующей функцией.
и 3 выше. Вопросы трансляции схем из исходной Другими словами, образуется биекция между
модели данных (например, объектной, реляцион- множеством исходных экземпляров и подмноже-
ной, XML-ориентированной) в целевую рассмат- ством целевых экземпляров данных. Это считает-
риваются в работах [45], где упоминается прото- ся общим требованием правильности отображения
тип интерактивной генерации реляционных схем исходной модели в целевую (что, конечно же, не-
из объектно-ориентированных, который встроен в точно, например в случае отображения моделей и
Microsoft Visual Studio 2005. В процессе трансля- схем для интеграции баз данных, поскольку дез-
ции схем используются правила элиминации кон- ориентирует пользователя целевой модели — он
струкций исходной схемы, которые отсутствуют в может ожидать появления экземпляров, которые
целевой модели данных. никогда не появятся из-за семантики исходной мо-

Неопределенными остаются термины соответ- дели). Утверждается, что универсальная характе-
ствия, специализации, поглощения во фразах типа: ризация отображения моделей данных (или схем

баз данных) является сложным делом: например,
– отображение схемы базы данных из одной мо-

при трансляции схем исходная и целевая модели
дели данных в соответствующую схему базы

могут обладать различными выразительными спо-
данных в другой модели данных;

собностями, так что при интуитивной трансляции
– каждая модель данных является специализаци- не удастся образовать ни доминирующей, ни экви-

ей супермодели, так что схема в любой модели валентной схемы, что может привести к потере
данных является схемой в супермодели; информации, представленной в рамках исходной

– генерируется соответствующая база данныхD схемы. Как выход из существующего положе-
2

в схеме S ния предлагается применять реверсивные отобра-
2;

жения, которые могут стать критерием правиль-
– каждая модель данных (исходная или целевая) ности [41].

поглощается супермоделью. В работе [48] предлагается использовать расши-
Заметна недостаточность теоретических обоснова- ряемую модель, а специализация и refinement могут
ний и необходимого минимума формальных опре- применяться для расширения модели, в которой
делений. метаконструкции организованы в виде иерархии

Одной из попыток формального обоснования наследования (решетки) предопределенных поня-
рассматриваемых отображений схем можно считать тий. Этот подход рассматривается как альтернатива
работу [46]. В ней используется категорный подход, подходу, основанному на метаконструкциях супер-
даны определения, на основе которых можно было модели.

34 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007



Конструирование канонических информационных моделей для интегрированных информационных систем

В работах Бернстайна макрооператоры над схе- Отличие способов расширения моделей. Расшире-
мами баз данных (Match, Merge, Diff, Compose) рас- ние канонической модели и расширение супермо-
сматриваются чисто синтаксически: схемы и их дели качественно различаются. Расширение ка-
отображения трактуются как графовые структуры, нонической модели — это семантический процесс
семантика схем, определяемая соответствующими введения в модель новых образцов параметризован-
языками определения данных [41], при этом отбра- ных замкнутых логических формул, выражающих в
сывается. Авторы осознают этот недостаток и в целевой модели зависимости данных, характерные
будущем предполагают провести дополнительные для исходной модели, параметризованных родо-
исследования. вых типов данных, представляющих новые типы

В практическом плане достижением считает- данных, отсутствующие в ядре канонической моде-
ся разработанная в результате многолетних иссле- ли, метафреймов, аннотирующих дополнительные
дований Алмаден Центра фирмы ИБМ система свойства конструкций ядра в расширенной модели.
CLIO [49], которая позволяет осуществлять отобра- В ModelGen процесс расширения супермодели —
жение схем ресурсных баз данных в целевые схемы, это, в основном, механический процесс введения в
выраженные в ограниченном подмножестве струк- нее новых метаконструкций.
турированных информационных моделей.

Кратко сравнение рассматриваемого в настоя- Сохранение информации при отображении моделей.
щей работе подхода (Синтез) и подхода ModelGen, Модели информационных ресурсов в Синтезе
развивавшихся независимо, заключается в следу- считаются определяемыми соответствующими им
ющем. языками со всеми деталями этих языков — их

синтаксисом и семантикой (для баз данных это два

Выразительные способности супер- и канонической языка — язык определения данных и язык манипу-

моделей. Цели отображения моделей данных и лирования данными). ModelGen абстрагируется от

схем различны: в Синтезе оно применяется, прежде этого, извлекая из языка определения данных толь-

всего, для синтеза канонической информационной ко спецификации структур данных. Исключается

модели и интеграции информационных ресурсов. детальное рассмотрение семантики языков, огра-

Поэтому в Синтезе рассматриваются разнообраз- ничений целостности баз данных, функций. Это

ные виды информационных ресурсов, не только неизбежно приводит к потере информации при

базы данных. отображении моделей данных (например, при отоб-
ражении объектных моделей в реляционные).

Супермодель ModelGen можно сравнивать с ка-
нонической моделью лишь условно. Каноническая Метод Синтеза основан на формальном опреде-

модель Синтеза является рабочим языком специ- лении семантики схем в исходной и целевой моде-

фикации посредников как приложений. Супермо- ли для доказательства факта уточнения результата

дель не является законченным языком и служит в отображения схемы в целевую модель схемой ис-

качестве вспомогательного средства отображения ходной модели. Отношение уточнения является

схем. строго определенным, и его использование в мето-
де для доказательства коммутативности диаграмм

Набор метаконструкций ядра канонической мо-
отображения спецификаций исходной модели дан-

дели (языка Синтез [32]) не ограничивается струк-
ных в целевую позволяет сохранить информацию и

турированными моделями данных, подобно Model-
операции и исключить использование плохо опре-

Gen. Он значительно шире и включает абстрактные
деленных понятий (соответствия, специализации,

типы данных (АТД) — объектные и необъектные,
поглощения схем).

фреймы, которые совместно с типизированными
значениями приводят к образованию гибридной
строго типизированной и слабоструктурированной Различие архитектур. Инфраструктура Унифика-
модели, функции как составляющие абстрактных тора моделей разработана с учетом указанных от-
типов (методы) и автономные функции (специ- личий Синтеза и ModelGen. Процесс отображения
фицируемые своими сигнатурами, пред- и посту- из исходной модели данных в ядро канонической
словиями), классы как множества объектов опре- модели включает определение необходимого рас-
деленного типа, отношения подтипа, подкласса, ширения ядра на основе сопоставления конструк-
связи между экземплярами АТД, метаклассы, ин- ций исходной и целевой моделей, доказательство
варианты АТД и классов, выражаемые средствами правильности отображения и построение трансля-
языка логических формул Синтеза, процессы. Кон- тора из исходной модели в целевую средствами
струкции супермодели легко включаются в состав метакомпиляции. Таким образом, получается гото-
конструкций канонической модели. вый продукт преобразования схем. Сопоставление

ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007 35



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

конструкций исходной и целевой моделей и расши- ным процессом создания разнообразных инфор-
рение ядра являются интерактивным творческим мационных моделей (языков) представления ин-
процессом, в котором помощь эксперту оказыва- формации и манипулирования ею. Чем больше
ют онтологические спецификации, аннотирующие разнообразие применяемых моделей в различных
конструкции исходной и целевой моделей, позво- ресурсах, тем более сложными становятся процес-
ляющие устанавливать отношения близости кон- сы их интеграции и композиции при создании
струкций. информационных систем. Сложность семантики

Метод Синтеза позволяет отображать произ- информационных моделей делает такие процессы
вольные модели данных, в частности, для под- интеграции неосуществимыми при попытке мани-
держки обмена данными. Это можно выполнять пулирования разномодельными спецификациями
непосредственно из модели в модель или через по- ресурсов. Единственным практическим выходом
средство канонической модели. Целесообразность является приведение разномодельных специфика-
осуществления отображения моделей в рамках ка- ций к общей, унифицированной модели, называе-
нонической модели отображением в нее исходной мой канонической.
и целевой моделей (подобно отображению моде- На протяжении длительного периода времени в
лей и схем в супермодель) требует специального лаборатории композиционных методов проектиро-
анализа. вания информационных систем ИПИ РАН разра-

Помимо универсальных средств отображения батывались методы синтеза канонических моделей
моделей данных и схем баз данных широко извест- для широкого спектра реальных информационных
ны попытки разработать общие языки информаци- моделей: структурированных, объектных, сервис-
онных моделей, спецификаций. Достаточно упо- ных, процессных, включая произвольные их ком-
мянуть UML, различные архитектуры разработки бинации. При этом рассматривались полные спе-
открытых систем (например, The Open Applica- цификации моделей (языков), включая средства
tions Group Integration Specification (OAGIS), мо- описания как информационных структур (типов
дели архитектур программного обеспечения, опре- данных), так и поведения (операций, функций и
деляющие компоненты программ, их свойства и процессов). При отображении структурированных,
связи между ними (Acme, Aesop, SADL)), выявле- слабоструктурированных, объектных, процессных
ние и описание типовых конструкций разнородных моделей в каноническую модель разработанные ме-
процессных моделей (проект, выполненный недав- тоды сохраняют информацию и операции в соот-
но в Голландии группой Ван дер Аальста), архитек- ветствии с принципом уточнения. В работе показа-
туры открытых систем OMG, движимые моделями но, как строить такие семантические отображения
(MDA). Недостатком указанных попыток является формально с целью верификации правильности до-
стремление создать общий язык как единое целое, стижения уточнения расширенной канонической
безотносительно к другим языкам спецификаций модели исходной информационной моделью. В ре-
ресурсов. зультате достигнута полнота охвата канонической

Для известных работ характерны отсутствие (не- моделью семантики разнообразных требующихся
достаточность) точных спецификаций семантики на практике видов моделей представления инфор-
языков, отсутствие верификации отображений ин- мации с возможностью доказательства правиль-
формационных моделей (например, в MDA), от- ности представления в расширяемой канонической
сутствие понятия синтеза расширяемой унифици- модели неоднородных практически используемых
рующей (канонической) модели. Разработанные моделей.
авторами методы отличаются от известных тем, что Разнообразные методы, на которые опирает-
во главу угла ставят расширяемую каноническую ся данная работа, разрабатывались авторами на
модель, конструируемую модульно путем расши- протяжении нескольких десятилетий. Эти мето-
рения ее ядра, имеют точно определенные фор- ды более подробно рассмотрены в других работах
мальные основания, широко применяют принцип авторов.
уточнения при унифицирующих преобразованиях Вместе с тем в реальных системах ввиду большо-
моделей. го разнообразия используемых информационных

моделей применение разработанных методов вруч-
ную становится неэффективным. В работе предло-

6 Заключение жена архитектура и функции компонентов Уни-
фикатора моделей, позволяющего доказательно

Рост объема накапливаемой информации (ин- приводить множество разнотипных информацион-
формационных ресурсов) в различных областях де- ных моделей ресурсов к каноническому представле-
ятельности человека сопровождается взрывоподоб- нию, опираясь на разработанные ранее методы. На

36 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007



Конструирование канонических информационных моделей для интегрированных информационных систем

примере отображения фрагментов онтологическо- model driven information systems engineering for net-
го языка OWL, применяемого в Веб, продемонстри- worked organizations: Proc. of the CAiSE INTEROP
рован процесс доказательного отображения этой Workshop. — Riga: Riga Technical University, 2004.
информационной модели в каноническую, ядро ко- P. 101–116.

торой составляет гибридный объектно-фреймовый 14. Kalinichenko L. A., Stupnikov S. A., Zemtsov N. A. Exten-
язык Синтез. Унификатор моделей находится в sible canonical process model synthesis applying formal

состоянии реализации. interpretation // East-European Conference ADBIS’05.
Springer, 2005.

15. Калиниченко Л. А., Ступников С. А., Земцов Н. А. Син-
тез канонических моделей для интеграции неодно-

Литература родных источников информации. — М.: ИПИ РАН,
2005. 87 с.

1. Denning P. Computing is a Natural Science // Communi- 16. Калиниченко Л. А. Синтез канонических моделей,
cations of the ACM, 2007. Vol. 50, № 7. предназначенных для достижения семантической

2. Denning P. Great principles of computing // Communi- интероперабельности неоднородных источников ин-
cations of the ACM, 2003. Vol. 46. № 11. формации // Системы и средства информатики:

3. Kroger P. Molecular biology data: Database overview, Спец. вып. «Формальные методы и модели в ком-
modelling issues, and perspectives. — Munich: Institute позиционных инфраструктурах распределенных ин-
for Informatics, Munich University. 2001. формационных систем». — М.: ИПИ РАН, 2005.

4. Bry F., Kroger P. A computational biology database di- 17. Ступников С. А. Формальная семантика ядра кано-
gest: Data, data analysis, and data management // J. of нической объектной информационной модели //
Distributed and Parallel Databases, 2003. Vol. 13. № 1. Системы и средства информатики: Спец. вып. «Фор-
P. 7–42. мальные методы и модели в композиционных инфра-

5. Data model for observation, Version 0.23. // IVOA DM структурах распределенных информационных сис-

WG Internal Draft, 2004. тем». — М.: ИПИ РАН, 2005.

6. 18. Ступников С. А. Отображение спецификаций, выра-
Cambresy L., Derriere S., Padovani P., Mar-
tinez A. P., and Richard A. Ontology of astronom- женных средствами ядра канонической модели, в

ical object types, Version 1.0. // IVOA Techni- Нотацию Абстрактных Машин // Системы и сред-

cal Note http://www.ivoa.net/ Documents/ cover/ ства информатики: Спец. вып. «Формальные методы

AstrObjectOntology-20061031.html, 2006. и модели в композиционных инфраструктурах рас-
пределенных информационных систем». — М.: ИПИ

7. Kalinichenko L. A., Briukhov D. O., Martynov D. O., РАН, 2005.
Skvortsov N. A., Stupnikov S. A. Mediation framework for

19. Ступников С. А. Автоматизация верификации уточ-
enterprise information system infrastructures // 9th Con-

нения при композиционном пректировании инфор-
ference (International) on Enterprise Information Sys-

мационных систем и посредников // Системы и сред-
tems (ICEIS), 2007.

ства информатики: Спец. вып. «Формальные методы
8. Калиниченко Л. А. Методология организации реше- и модели в композиционных инфраструктурах рас-

ния задач над множественными распределенными пределенных информационных систем». — М.: ИПИ
неоднородными источниками информации // Меж- РАН, 2005.
дународная конференция «Современные информа-

20. Ступников С. А., Брюхов Д. О. Представление UML
ционные технологии и ИТ-образование». — М.: МГУ,

и OCL в канонической информационной модели //
2005. С. 20–37.

Системы и средства информатики: Спец. вып. «Фор-
9. Kalinichenko L. A. Data model transformation method мальные методы и модели в композиционных инфра-

based on axiomatic data model extension // 4th Confer- структурах распределенных информационных сис-
ence (International) on Very Large Data Bases, 1978. тем». — М.: ИПИ РАН, 2005.

10. Калиниченко Л. А. Методы и средства интеграции не- 21. Kalinichenko L. A. Method for data models integration
однородных баз данных. — М.: Наука, 1983. in the common paradigm // Advances in Databases and

11. Kalinichenko L. A. Methods and tools for equivalent data Information Systems: Proc. of the 1st East-European
model mapping construction // Proc. EDBT’90 Confer- Conference. — St. Petersburg: Nevsky Dialekt, 1997.
ence. Springer-Verlag, 1990. P. 92–119. P. 275–284.

12. Kalinichenko L. A., Skvortsov N. A. Extensible ontolog- 22. Butler M. csp2B: A practical approach to combining CSP
ical modeling framework for subject mediation // 4th and B // Formal Aspects of Computing, 2000. Vol. 12.
Russian Scientific Conference “DIGITAL LIBRARIES: 23. Treharne H., Schneider S. How to Drive a B machine //
Advanced Methods and Technologies, Digital Collec- Formal Specification and Development in Z and B: First
tions.” — Dubna, 2002. International Conference of Z and B Users, 2000.

13. Kalinichenko L. A. Canonical model development tech- 24. Stupnikov S. A., Kalinichenko L. A., Dong J. S. Applying
niques aimed at semantic interoperability in the heteroge- CSP-like workflow process specifications for their refine-
neous world of information modeling // Knowledge and ment in AMN by pre-existing workflows // Advances in

ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007 37



В. Н. Захаров, Л. А. Калиниченко, И. А. Соколов, С. А. Ступников

Databases and Information Systems: Proc. of the 6th East- 37. Atzeni P. Schema and data translation: A personal per-
European Conference. — Bratislava: Slovak University of spective // 11th East European Conference ADBIS 2007.
Technology, 2002. P. 206–215. Springer, 2007.

25. Abrial J.-R. B#: Toward a synthesis between Z and B // 38. Atzeni P., Cappellari P., Bernstein P. ModelGen: Mod-
ZB’2003 — Formal Specification and Development in Z el independent schema translation // 21st International
and B: International Conference of B and Z Users, 2003. Conference on Data Engineering, 2005.
P. 168–177. 39. Hull R., King R. Semantic database modeling: Survey,

26. Stupnikov S. A., Kalinichenko L. A., Bressan S. Interac- applications and research issues // ACM Computing Sur-
tive discovery and composition of complex Web services // veys, 1987. Vol. 19. № 3.
East-European Conference on ADBIS’06. Springer, 2006.

40. Atzeni P., Cappellari P., Gianforme G. MIDST: Model in-
27. Abrial J.-R. B-Technology. Technical overview. B-Core

dependent schema and data translation // SIGMOD 2007
(UK) Ltd., 1993.

Conference.
28. Abrial J.-R. The B-Book: Assigning programs to mean-

ings. — Cambridge: Cambridge University Press, 1996. 41. Bernstein P. Applying model management to classical meta

29. Cansell D., Mery D. Foudations of the B Method // Com- data problems // 2003 CIDR Conference.

puting and Informatics, 2003. Vol. 22, No. 3–4. P. 221– 42. Melnik S., Rahm E., Bernstein P. Rondo: A programming
256. platform for generic model management // SIGMOD

30. The B-Toolkit. http://www.b-core.com/ONLINEDOC/ 2003 Conference.
BToolkit.html. 43. Melnik S., Bernstein P., Halevy A., Rahm E. Supporting

31. Atelier B: The industrial tool to efficiently deploy executable mappings in model management // SIGMOD
the B method. http://www.atelierb.societe.com/index 2005 Conference.
uk.html. 44. Atzeni P., Cappellari P., Bernstein P. A multilevel dic-

32. Kalinichenko L. A., Stupnikov S. A., Martynov D. O. SYN- tionary for model management // ER 2005 Conference.
THESIS: A language for canonical information modeling Springer-Verlag, 2005.
and mediator definition for problem solving in hetero- 45. Bernstein P., Melnik S., Mork P. Interactive schema trans-
geneous information resource environments. — M.: IPI lation with instance-level mappings // 31st VLDB Con-
RAS, 2007. 171 p. ference, 2005.

33. Van den Brand M. G. J., van Deursen A., Heering J., et
46. Alagic S., Bernstein P. A model theory for generic schema

al. The ASF + SDF meta-environment: A component-
management // DBPL, 2001.

based language development environment // Compiler
Construction 2001 / Ed. by R. Wilhelm. Springer, 2001. 47. Miller R., Ioannidis Y., Ramakrishnan R. Schema equiv-
P. 365–370. alence in heterogeneous systems: Bridging theory and

34. Van der Aalst W. M. P., ter Hofstede A. H. M., Kiepuszews- practice // Information Systems, 1994. Vol. 19. № 1.

ki B., Barros A. P. Workflow patterns // Distributed and 48. Barsalou T., Gangopadhyay D. M(dm): An open frame-
Parallel Databases, 2003. Vol. 14. № 3. P. 5–51. work for interoperation of multimodel multidatabase sys-

35. OWL Web ontology language reference. W3C Recom- tems // ICDE 1992. — Los Alamitos: IEEE Computer
mendation. http://www.w3.org/TR/owl-ref/, 2004. Society Press, 1992.

36. Patel-Schneider P. F., Hayes P., Horrocks I. OWL Web 49. Haas L. M., Hernandez M. A., Ho H., Popa L., and Roth M.
ontology language semantics and abstract syntax // Clio, 2005. Grows up: From research prototype to indus-
W3C Recommendation. http://www.w3.org/TR/owl- trial tool // Proc. of the ACM SIGMOD Conference,
semantics/, 2004. 2005. Baltimore, Maryland, USA.

38 ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ том 1 выпуск 2 2007