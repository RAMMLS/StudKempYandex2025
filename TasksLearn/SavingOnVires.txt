 return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z));  вычисление евклидова расстояния.

Формула для расчета расстояния в трехмерном пространстве: 
    sqrt((x2 - x1)^2 + (y2-y1)^2 + (z2 - z1)^2). 

sqrt - функция из <cmath> для извлечения квадратного корня.


Основой является алгоритм Вайцфельда для нахождение геометрического медиана.

eps - точность 

Вычисление центроида

for (const auto& p : points) {
    median.x += p.x;
    median.y += p.y;
    median.z += p.z;
  }
  median.x /= points.size();
  median.y /= points.size();
  median.z /= points.size();

То есть основная задача состоит в вычислении среднего арифметического координат x,y,z 

Внешний цикл выполняется до тех пор, пока не будет достигнуто максимальное число итераций. Это необходимо для предотвращения бесконечного цикла, если алгоритм не сходится.

[!] Считаем веса обратно пропорциональными расстоянию между точками.


if (dist < eps) continue; - критически важная проверка, если расстояние меньше eps, цикл переходит к следующей точке, это сделано для избегания деления на 0, которое может произойти, если медиана совпадает с одной из точек. Так же, если эти точки слишком близки друг к другу, данная проверка позволяет повысить точность алгоритма.

Если сумма весов равна нулю - все точки совпадают с одной медианой. В этом случае цикл завершается, так как дальнейшие итерации не изменят медиану.

if(distance(median, newMedian) < eps) - проверка на сходимость.

В целом алгоритм Вайцфельда разработан для минимизации су
ммы евклидовых расстояний между точками. Он относительно прост в реализации и обычно сходится достаточно быстро. Важно отметить что данный алгоритм гарантирует сходимость к локальному минимуму.
