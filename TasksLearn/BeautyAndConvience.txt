Как работает: 

#include <vector> - библиотека для создания динамических массивов
#include <algorithm> - алгоритмы типа max

n - количество монет 
k - максимальное количество монет, которые можно перевернуть

vector<int> coins(n); - обьявляем массив coins() размера n для хранения информации о монетах

for - считаем монеты (перебираем)

Мы использовали алгоритм скользящего окна: поддерживали окно (подпоследовательность) с границами left && right. Окно расширяется вправо, пока не встретим слишком много "уродливых" монет (zeros>k).
  Сжатие окна: если уродливых монет становится слишком много, мы начинаем сжимать окно слева, двигая границу left вправо. При этом мы уменьшаем счетчик zeros, если монета, которую мы подбрасываем была уродливой.
  Поддержание инварианта: основная идея состоит в том, что на каждой итерации внешнего цикла for, мы гарантируем, что кол-во уродливых монет в текущем окне (zeros) не превышает k. Цикл while как раз и нужен для поддержания этого инварианта.
  Оптимальность: алгоритм просматривает всевозможные непрерывные последовательности, которые удовлетворяют условию задачи, и находит максимальную длинну. Мы перебираем все возможные границы (right) и для каждой правой границы находим самую левую допустимую левую границу (left)

  В общем случае: 
    Эта программа решает задачу нахождения самой длинной последовательности монет, которые можно сделать "красивыми", перевернув не более k монет. Исользуется алгоритм скользящего окна. Окно расширяется вправо, и если кол-во "уродливых" монет в окне превышает k, окно сжимается слева. Таким образом, на каждой итерации мы поддерживаем окно, удовлетворяющее условию задачи, и обновляем максимальную длину, которую мы нашли. 

Переменная zeros - отслеживает кол-во уродливых монет внутри текущего окна
Цикл while - используется внутри for для поддержания основного инварианта алгоритма: кол-во уродливых монет в окне должно быть не более k. Когда мы добавляем монету справа, это кол-во может превысить k. Цикл сжимает окно слева, чтобы восстановить этот инвариант.
